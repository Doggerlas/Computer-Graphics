node {
  name: "npr_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "ds_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "fLMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "fLInvMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "gtN_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "gtD_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "gtField_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "clIMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "shapeMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "dsMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "2dMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "sLMask_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "curvMag_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "SASFieldNet/concat_field_input/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASFieldNet/concat_field_input"
  op: "ConcatV2"
  input: "npr_input"
  input: "2dMask_input"
  input: "ds_input"
  input: "fLMask_input"
  input: "sLMask_input"
  input: "curvMag_input"
  input: "SASFieldNet/concat_field_input/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/reg_f_input"
  op: "Identity"
  input: "SASFieldNet/concat_field_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\006\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 6
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv1/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv1/weights"
}
node {
  name: "SASFieldNet/f_conv1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/weights"
  input: "SASFieldNet/f_conv1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_conv1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_conv1/kernel/Regularizer/Square"
  input: "SASFieldNet/f_conv1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv1/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_conv1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/reg_f_input"
  input: "SASFieldNet/f_conv1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv1/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv1/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/beta"
  input: "SASFieldNet/f_conv1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_conv1/Conv2D"
  input: "SASFieldNet/f_conv1/BatchNorm/Const"
  input: "SASFieldNet/f_conv1/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv1/Relu"
  op: "Relu"
  input: "SASFieldNet/f_conv1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv2/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv2/weights"
}
node {
  name: "SASFieldNet/f_conv2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/weights"
  input: "SASFieldNet/f_conv2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_conv2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_conv2/kernel/Regularizer/Square"
  input: "SASFieldNet/f_conv2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv2/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_conv2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_conv1/Relu"
  input: "SASFieldNet/f_conv2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv2/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/beta"
  input: "SASFieldNet/f_conv2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_conv2/Conv2D"
  input: "SASFieldNet/f_conv2/BatchNorm/Const"
  input: "SASFieldNet/f_conv2/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv2/Relu"
  op: "Relu"
  input: "SASFieldNet/f_conv2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_pool1/MaxPool"
  op: "MaxPool"
  input: "SASFieldNet/f_conv2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv3/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv3/weights"
}
node {
  name: "SASFieldNet/f_conv3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/weights"
  input: "SASFieldNet/f_conv3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_conv3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_conv3/kernel/Regularizer/Square"
  input: "SASFieldNet/f_conv3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv3/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_conv3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_pool1/MaxPool"
  input: "SASFieldNet/f_conv3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv3/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/beta"
  input: "SASFieldNet/f_conv3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_conv3/Conv2D"
  input: "SASFieldNet/f_conv3/BatchNorm/Const"
  input: "SASFieldNet/f_conv3/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv3/Relu"
  op: "Relu"
  input: "SASFieldNet/f_conv3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv4/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv4/weights"
}
node {
  name: "SASFieldNet/f_conv4/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/weights"
  input: "SASFieldNet/f_conv4/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_conv4/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_conv4/kernel/Regularizer/Square"
  input: "SASFieldNet/f_conv4/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv4/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_conv4/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_conv3/Relu"
  input: "SASFieldNet/f_conv4/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv4/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv4/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/beta"
  input: "SASFieldNet/f_conv4/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_conv4/Conv2D"
  input: "SASFieldNet/f_conv4/BatchNorm/Const"
  input: "SASFieldNet/f_conv4/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv4/Relu"
  op: "Relu"
  input: "SASFieldNet/f_conv4/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_pool2/MaxPool"
  op: "MaxPool"
  input: "SASFieldNet/f_conv4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv5/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv5/weights"
}
node {
  name: "SASFieldNet/f_conv5/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/weights"
  input: "SASFieldNet/f_conv5/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_conv5/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_conv5/kernel/Regularizer/Square"
  input: "SASFieldNet/f_conv5/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv5/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_conv5/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_pool2/MaxPool"
  input: "SASFieldNet/f_conv5/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv5/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv5/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/beta"
  input: "SASFieldNet/f_conv5/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_conv5/Conv2D"
  input: "SASFieldNet/f_conv5/BatchNorm/Const"
  input: "SASFieldNet/f_conv5/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv5/Relu"
  op: "Relu"
  input: "SASFieldNet/f_conv5/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv6/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv6/weights"
}
node {
  name: "SASFieldNet/f_conv6/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/weights"
  input: "SASFieldNet/f_conv6/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_conv6/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_conv6/kernel/Regularizer/Square"
  input: "SASFieldNet/f_conv6/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_conv6/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_conv6/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_conv5/Relu"
  input: "SASFieldNet/f_conv6/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv6/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv6/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/beta"
  input: "SASFieldNet/f_conv6/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_conv6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_conv6/Conv2D"
  input: "SASFieldNet/f_conv6/BatchNorm/Const"
  input: "SASFieldNet/f_conv6/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_conv6/Relu"
  op: "Relu"
  input: "SASFieldNet/f_conv6/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_1/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_1/weights"
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_1/weights"
  input: "SASFieldNet/f_deconv3_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Square"
  input: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_1/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_deconv3_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_1/biases"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_1/biases"
}
node {
  name: "SASFieldNet/f_deconv3_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_1/biases"
  input: "SASFieldNet/f_deconv3_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/Shape"
  op: "Shape"
  input: "SASFieldNet/f_conv6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv3_1/Shape"
  input: "SASFieldNet/f_deconv3_1/strided_slice/stack"
  input: "SASFieldNet/f_deconv3_1/strided_slice/stack_1"
  input: "SASFieldNet/f_deconv3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv3_1/Shape"
  input: "SASFieldNet/f_deconv3_1/strided_slice_1/stack"
  input: "SASFieldNet/f_deconv3_1/strided_slice_1/stack_1"
  input: "SASFieldNet/f_deconv3_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv3_1/Shape"
  input: "SASFieldNet/f_deconv3_1/strided_slice_2/stack"
  input: "SASFieldNet/f_deconv3_1/strided_slice_2/stack_1"
  input: "SASFieldNet/f_deconv3_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_1/strided_slice_1"
  input: "SASFieldNet/f_deconv3_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/mul_1"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_1/strided_slice_2"
  input: "SASFieldNet/f_deconv3_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/stack"
  op: "Pack"
  input: "SASFieldNet/f_deconv3_1/strided_slice"
  input: "SASFieldNet/f_deconv3_1/mul"
  input: "SASFieldNet/f_deconv3_1/mul_1"
  input: "SASFieldNet/f_deconv3_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv3_1/stack"
  input: "SASFieldNet/f_deconv3_1/strided_slice_3/stack"
  input: "SASFieldNet/f_deconv3_1/strided_slice_3/stack_1"
  input: "SASFieldNet/f_deconv3_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASFieldNet/f_deconv3_1/stack"
  input: "SASFieldNet/f_deconv3_1/conv2d_transpose/ReadVariableOp"
  input: "SASFieldNet/f_conv6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_1/BiasAdd"
  op: "BiasAdd"
  input: "SASFieldNet/f_deconv3_1/conv2d_transpose"
  input: "SASFieldNet/f_deconv3_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASFieldNet/f_concat3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASFieldNet/f_concat3/concat"
  op: "ConcatV2"
  input: "SASFieldNet/f_conv4/Relu"
  input: "SASFieldNet/f_deconv3_1/BiasAdd"
  input: "SASFieldNet/f_concat3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_2/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_2/weights"
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/weights"
  input: "SASFieldNet/f_deconv3_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Square"
  input: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_2/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_deconv3_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_concat3/concat"
  input: "SASFieldNet/f_deconv3_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_deconv3_2/Conv2D"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/Const"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_2/Relu"
  op: "Relu"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_3/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_3/weights"
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/weights"
  input: "SASFieldNet/f_deconv3_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Square"
  input: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv3_3/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_deconv3_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_deconv3_2/Relu"
  input: "SASFieldNet/f_deconv3_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_deconv3_3/Conv2D"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/Const"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv3_3/Relu"
  op: "Relu"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_1/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_1/weights"
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_1/weights"
  input: "SASFieldNet/f_deconv4_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Square"
  input: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_1/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_deconv4_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_1/biases"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_1/biases"
}
node {
  name: "SASFieldNet/f_deconv4_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_1/biases"
  input: "SASFieldNet/f_deconv4_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/Shape"
  op: "Shape"
  input: "SASFieldNet/f_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv4_1/Shape"
  input: "SASFieldNet/f_deconv4_1/strided_slice/stack"
  input: "SASFieldNet/f_deconv4_1/strided_slice/stack_1"
  input: "SASFieldNet/f_deconv4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv4_1/Shape"
  input: "SASFieldNet/f_deconv4_1/strided_slice_1/stack"
  input: "SASFieldNet/f_deconv4_1/strided_slice_1/stack_1"
  input: "SASFieldNet/f_deconv4_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv4_1/Shape"
  input: "SASFieldNet/f_deconv4_1/strided_slice_2/stack"
  input: "SASFieldNet/f_deconv4_1/strided_slice_2/stack_1"
  input: "SASFieldNet/f_deconv4_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_1/strided_slice_1"
  input: "SASFieldNet/f_deconv4_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/mul_1"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_1/strided_slice_2"
  input: "SASFieldNet/f_deconv4_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/stack"
  op: "Pack"
  input: "SASFieldNet/f_deconv4_1/strided_slice"
  input: "SASFieldNet/f_deconv4_1/mul"
  input: "SASFieldNet/f_deconv4_1/mul_1"
  input: "SASFieldNet/f_deconv4_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASFieldNet/f_deconv4_1/stack"
  input: "SASFieldNet/f_deconv4_1/strided_slice_3/stack"
  input: "SASFieldNet/f_deconv4_1/strided_slice_3/stack_1"
  input: "SASFieldNet/f_deconv4_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASFieldNet/f_deconv4_1/stack"
  input: "SASFieldNet/f_deconv4_1/conv2d_transpose/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_1/BiasAdd"
  op: "BiasAdd"
  input: "SASFieldNet/f_deconv4_1/conv2d_transpose"
  input: "SASFieldNet/f_deconv4_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASFieldNet/f_concat4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASFieldNet/f_concat4/concat"
  op: "ConcatV2"
  input: "SASFieldNet/f_conv2/Relu"
  input: "SASFieldNet/f_deconv4_1/BiasAdd"
  input: "SASFieldNet/f_concat4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_2/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_2/weights"
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/weights"
  input: "SASFieldNet/f_deconv4_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Square"
  input: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_2/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_deconv4_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_concat4/concat"
  input: "SASFieldNet/f_deconv4_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_deconv4_2/Conv2D"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/Const"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_2/Relu"
  op: "Relu"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_3/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_3/weights"
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/weights"
  input: "SASFieldNet/f_deconv4_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Square"
  input: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_deconv4_3/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_deconv4_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_deconv4_2/Relu"
  input: "SASFieldNet/f_deconv4_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_deconv4_3/Conv2D"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/Const"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_deconv4_3/Relu"
  op: "Relu"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASFieldNet/f_output/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASFieldNet/f_output/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASFieldNet/f_output/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASFieldNet/f_output/weights/Initializer/truncated_normal/mul"
  input: "SASFieldNet/f_output/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_output/weights"
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_output/weights"
}
node {
  name: "SASFieldNet/f_output/weights/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/weights"
  input: "SASFieldNet/f_output/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/kernel/Regularizer/Square"
  op: "Square"
  input: "SASFieldNet/f_output/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASFieldNet/f_output/kernel/Regularizer/Square"
  input: "SASFieldNet/f_output/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/f_output/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASFieldNet/f_output/kernel/Regularizer/mul/x"
  input: "SASFieldNet/f_output/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/Conv2D"
  op: "Conv2D"
  input: "SASFieldNet/f_deconv4_3/Relu"
  input: "SASFieldNet/f_output/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_output/BatchNorm/beta"
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_output/BatchNorm/beta"
}
node {
  name: "SASFieldNet/f_output/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/beta"
  input: "SASFieldNet/f_output/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_output/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean"
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASFieldNet/f_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASFieldNet/f_output/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance"
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASFieldNet/f_output/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASFieldNet/f_output/Conv2D"
  input: "SASFieldNet/f_output/BatchNorm/Const"
  input: "SASFieldNet/f_output/BatchNorm/ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASFieldNet/output_f"
  op: "Identity"
  input: "SASFieldNet/f_output/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/mul"
  op: "Mul"
  input: "2dMask_input"
  input: "clIMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/Tile"
  op: "Tile"
  input: "SASMFGeoNet/mul"
  input: "SASMFGeoNet/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/mul_1"
  op: "Mul"
  input: "SASFieldNet/output_f"
  input: "SASMFGeoNet/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/concat_geo_input/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/concat_geo_input"
  op: "ConcatV2"
  input: "npr_input"
  input: "ds_input"
  input: "2dMask_input"
  input: "fLMask_input"
  input: "sLMask_input"
  input: "curvMag_input"
  input: "SASMFGeoNet/mul_1"
  input: "SASMFGeoNet/concat_geo_input/axis"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\n\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 10
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv1/weights"
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/weights"
  input: "SASMFGeoNet/geo_conv1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/concat_geo_input"
  input: "SASMFGeoNet/geo_conv1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv1/Conv2D"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv1/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv2/weights"
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/weights"
  input: "SASMFGeoNet/geo_conv2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_conv1/Relu"
  input: "SASMFGeoNet/geo_conv2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv2/Conv2D"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_pool1/MaxPool"
  op: "MaxPool"
  input: "SASMFGeoNet/geo_conv2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv3/weights"
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/weights"
  input: "SASMFGeoNet/geo_conv3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_pool1/MaxPool"
  input: "SASMFGeoNet/geo_conv3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv3/Conv2D"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv4/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv4/weights"
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/weights"
  input: "SASMFGeoNet/geo_conv4/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv4/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv4/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_conv3/Relu"
  input: "SASMFGeoNet/geo_conv4/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv4/Conv2D"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv4/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_pool2/MaxPool"
  op: "MaxPool"
  input: "SASMFGeoNet/geo_conv4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_onv5/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_onv5/weights"
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/weights"
  input: "SASMFGeoNet/geo_onv5/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_onv5/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_onv5/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_pool2/MaxPool"
  input: "SASMFGeoNet/geo_onv5/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_onv5/Conv2D"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/Const"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_onv5/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv6/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv6/weights"
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/weights"
  input: "SASMFGeoNet/geo_conv6/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv6/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv6/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_onv5/Relu"
  input: "SASMFGeoNet/geo_conv6/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv6/Conv2D"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv6/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_pool3/MaxPool"
  op: "MaxPool"
  input: "SASMFGeoNet/geo_conv6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv7/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv7/weights"
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/weights"
  input: "SASMFGeoNet/geo_conv7/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv7/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv7/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_pool3/MaxPool"
  input: "SASMFGeoNet/geo_conv7/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv7/Conv2D"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv7/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv8/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv8/weights"
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/weights"
  input: "SASMFGeoNet/geo_conv8/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv8/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv8/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_conv7/Relu"
  input: "SASMFGeoNet/geo_conv8/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv8/Conv2D"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv8/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_pool4/MaxPool"
  op: "MaxPool"
  input: "SASMFGeoNet/geo_conv8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv9/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv9/weights"
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/weights"
  input: "SASMFGeoNet/geo_conv9/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv9/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv9/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_pool4/MaxPool"
  input: "SASMFGeoNet/geo_conv9/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv9/Conv2D"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv9/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv10/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv10/weights"
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/weights"
  input: "SASMFGeoNet/geo_conv10/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Square"
  input: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/geo_conv10/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/geo_conv10/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/geo_conv9/Relu"
  input: "SASMFGeoNet/geo_conv10/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/geo_conv10/Conv2D"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/Const"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/geo_conv10/Relu"
  op: "Relu"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv1_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/geo_conv10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice/stack"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice/stack_1"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1/stack"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2/stack"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_1"
  input: "SASMFGeoNet/d_geo_deconv1_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_2"
  input: "SASMFGeoNet/d_geo_deconv1_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice"
  input: "SASMFGeoNet/d_geo_deconv1_1/mul"
  input: "SASMFGeoNet/d_geo_deconv1_1/mul_1"
  input: "SASMFGeoNet/d_geo_deconv1_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv1_1/stack"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3/stack"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/d_geo_deconv1_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/d_geo_deconv1_1/stack"
  input: "SASMFGeoNet/d_geo_deconv1_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/d_geo_deconv1_1/conv2d_transpose"
  input: "SASMFGeoNet/d_geo_deconv1_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv1_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/geo_conv10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice/stack"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice/stack_1"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1/stack"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2/stack"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_1"
  input: "SASMFGeoNet/n_geo_deconv1_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_2"
  input: "SASMFGeoNet/n_geo_deconv1_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice"
  input: "SASMFGeoNet/n_geo_deconv1_1/mul"
  input: "SASMFGeoNet/n_geo_deconv1_1/mul_1"
  input: "SASMFGeoNet/n_geo_deconv1_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv1_1/stack"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3/stack"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/n_geo_deconv1_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/n_geo_deconv1_1/stack"
  input: "SASMFGeoNet/n_geo_deconv1_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/n_geo_deconv1_1/conv2d_transpose"
  input: "SASMFGeoNet/n_geo_deconv1_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv1_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/geo_conv10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice/stack"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice/stack_1"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1/stack"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv1_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2/stack"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_1"
  input: "SASMFGeoNet/c_geo_deconv1_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_2"
  input: "SASMFGeoNet/c_geo_deconv1_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice"
  input: "SASMFGeoNet/c_geo_deconv1_1/mul"
  input: "SASMFGeoNet/c_geo_deconv1_1/mul_1"
  input: "SASMFGeoNet/c_geo_deconv1_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv1_1/stack"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3/stack"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/c_geo_deconv1_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/c_geo_deconv1_1/stack"
  input: "SASMFGeoNet/c_geo_deconv1_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/c_geo_deconv1_1/conv2d_transpose"
  input: "SASMFGeoNet/c_geo_deconv1_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat1/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv8/Relu"
  input: "SASMFGeoNet/d_geo_deconv1_1/BiasAdd"
  input: "SASMFGeoNet/d_geo_concat1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat1/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv8/Relu"
  input: "SASMFGeoNet/n_geo_deconv1_1/BiasAdd"
  input: "SASMFGeoNet/n_geo_concat1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat1/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv8/Relu"
  input: "SASMFGeoNet/c_geo_deconv1_1/BiasAdd"
  input: "SASMFGeoNet/c_geo_concat1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv1_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_concat1/concat"
  input: "SASMFGeoNet/d_geo_deconv1_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv1_2/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv1_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_concat1/concat"
  input: "SASMFGeoNet/n_geo_deconv1_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv1_2/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv1_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_concat1/concat"
  input: "SASMFGeoNet/c_geo_deconv1_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv1_2/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv1_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_deconv1_2/Relu"
  input: "SASMFGeoNet/d_geo_deconv1_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv1_3/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv1_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv1_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_deconv1_2/Relu"
  input: "SASMFGeoNet/n_geo_deconv1_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv1_3/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv1_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv1_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_deconv1_2/Relu"
  input: "SASMFGeoNet/c_geo_deconv1_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv1_3/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv1_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv2_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv2_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv2_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases"
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/d_geo_deconv1_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice/stack"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice/stack_1"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1/stack"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2/stack"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_1"
  input: "SASMFGeoNet/d_geo_deconv2_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_2"
  input: "SASMFGeoNet/d_geo_deconv2_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice"
  input: "SASMFGeoNet/d_geo_deconv2_1/mul"
  input: "SASMFGeoNet/d_geo_deconv2_1/mul_1"
  input: "SASMFGeoNet/d_geo_deconv2_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv2_1/stack"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3/stack"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/d_geo_deconv2_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/d_geo_deconv2_1/stack"
  input: "SASMFGeoNet/d_geo_deconv2_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/d_geo_deconv2_1/conv2d_transpose"
  input: "SASMFGeoNet/d_geo_deconv2_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv2_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv2_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv2_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases"
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/n_geo_deconv1_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice/stack"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice/stack_1"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1/stack"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2/stack"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_1"
  input: "SASMFGeoNet/n_geo_deconv2_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_2"
  input: "SASMFGeoNet/n_geo_deconv2_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice"
  input: "SASMFGeoNet/n_geo_deconv2_1/mul"
  input: "SASMFGeoNet/n_geo_deconv2_1/mul_1"
  input: "SASMFGeoNet/n_geo_deconv2_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv2_1/stack"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3/stack"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/n_geo_deconv2_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/n_geo_deconv2_1/stack"
  input: "SASMFGeoNet/n_geo_deconv2_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/n_geo_deconv2_1/conv2d_transpose"
  input: "SASMFGeoNet/n_geo_deconv2_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv2_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv2_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv2_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases"
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/c_geo_deconv1_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice/stack"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice/stack_1"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1/stack"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv2_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2/stack"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_1"
  input: "SASMFGeoNet/c_geo_deconv2_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_2"
  input: "SASMFGeoNet/c_geo_deconv2_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice"
  input: "SASMFGeoNet/c_geo_deconv2_1/mul"
  input: "SASMFGeoNet/c_geo_deconv2_1/mul_1"
  input: "SASMFGeoNet/c_geo_deconv2_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv2_1/stack"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3/stack"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/c_geo_deconv2_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/c_geo_deconv2_1/stack"
  input: "SASMFGeoNet/c_geo_deconv2_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/c_geo_deconv2_1/conv2d_transpose"
  input: "SASMFGeoNet/c_geo_deconv2_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat2/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv6/Relu"
  input: "SASMFGeoNet/d_geo_deconv2_1/BiasAdd"
  input: "SASMFGeoNet/d_geo_concat2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat2/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv6/Relu"
  input: "SASMFGeoNet/n_geo_deconv2_1/BiasAdd"
  input: "SASMFGeoNet/n_geo_concat2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat2/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv6/Relu"
  input: "SASMFGeoNet/c_geo_deconv2_1/BiasAdd"
  input: "SASMFGeoNet/c_geo_concat2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deonv2_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deonv2_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_concat2/concat"
  input: "SASMFGeoNet/d_geo_deonv2_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deonv2_2/Conv2D"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deonv2_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deonv2_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deonv2_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_concat2/concat"
  input: "SASMFGeoNet/n_geo_deonv2_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deonv2_2/Conv2D"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deonv2_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deonv2_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deonv2_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_concat2/concat"
  input: "SASMFGeoNet/c_geo_deonv2_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deonv2_2/Conv2D"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deonv2_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv2_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv2_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_deonv2_2/Relu"
  input: "SASMFGeoNet/d_geo_deconv2_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv2_3/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv2_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv2_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv2_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_deonv2_2/Relu"
  input: "SASMFGeoNet/n_geo_deconv2_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv2_3/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv2_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv2_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv2_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_deonv2_2/Relu"
  input: "SASMFGeoNet/c_geo_deconv2_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv2_3/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv2_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv3_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/d_geo_deconv2_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice/stack"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice/stack_1"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1/stack"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2/stack"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_1"
  input: "SASMFGeoNet/d_geo_deconv3_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_2"
  input: "SASMFGeoNet/d_geo_deconv3_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice"
  input: "SASMFGeoNet/d_geo_deconv3_1/mul"
  input: "SASMFGeoNet/d_geo_deconv3_1/mul_1"
  input: "SASMFGeoNet/d_geo_deconv3_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv3_1/stack"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3/stack"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/d_geo_deconv3_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/d_geo_deconv3_1/stack"
  input: "SASMFGeoNet/d_geo_deconv3_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/d_geo_deconv3_1/conv2d_transpose"
  input: "SASMFGeoNet/d_geo_deconv3_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv3_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/n_geo_deconv2_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice/stack"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice/stack_1"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1/stack"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2/stack"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_1"
  input: "SASMFGeoNet/n_geo_deconv3_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_2"
  input: "SASMFGeoNet/n_geo_deconv3_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice"
  input: "SASMFGeoNet/n_geo_deconv3_1/mul"
  input: "SASMFGeoNet/n_geo_deconv3_1/mul_1"
  input: "SASMFGeoNet/n_geo_deconv3_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv3_1/stack"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3/stack"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/n_geo_deconv3_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/n_geo_deconv3_1/stack"
  input: "SASMFGeoNet/n_geo_deconv3_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/n_geo_deconv3_1/conv2d_transpose"
  input: "SASMFGeoNet/n_geo_deconv3_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv3_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/c_geo_deconv2_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice/stack"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice/stack_1"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1/stack"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv3_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2/stack"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_1"
  input: "SASMFGeoNet/c_geo_deconv3_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_2"
  input: "SASMFGeoNet/c_geo_deconv3_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice"
  input: "SASMFGeoNet/c_geo_deconv3_1/mul"
  input: "SASMFGeoNet/c_geo_deconv3_1/mul_1"
  input: "SASMFGeoNet/c_geo_deconv3_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv3_1/stack"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3/stack"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/c_geo_deconv3_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/c_geo_deconv3_1/stack"
  input: "SASMFGeoNet/c_geo_deconv3_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/c_geo_deconv3_1/conv2d_transpose"
  input: "SASMFGeoNet/c_geo_deconv3_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat3/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv4/Relu"
  input: "SASMFGeoNet/d_geo_deconv3_1/BiasAdd"
  input: "SASMFGeoNet/d_geo_concat3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat3/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv4/Relu"
  input: "SASMFGeoNet/n_geo_deconv3_1/BiasAdd"
  input: "SASMFGeoNet/n_geo_concat3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat3/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv4/Relu"
  input: "SASMFGeoNet/c_geo_deconv3_1/BiasAdd"
  input: "SASMFGeoNet/c_geo_concat3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv3_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_concat3/concat"
  input: "SASMFGeoNet/d_geo_deconv3_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv3_2/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv3_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_concat3/concat"
  input: "SASMFGeoNet/n_geo_deconv3_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv3_2/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv3_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_concat3/concat"
  input: "SASMFGeoNet/c_geo_deconv3_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv3_2/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv3_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_deconv3_2/Relu"
  input: "SASMFGeoNet/d_geo_deconv3_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv3_3/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv3_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv3_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_deconv3_2/Relu"
  input: "SASMFGeoNet/n_geo_deconv3_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv3_3/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv3_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv3_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_deconv3_2/Relu"
  input: "SASMFGeoNet/c_geo_deconv3_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv3_3/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv3_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv4_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/d_geo_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice/stack"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice/stack_1"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1/stack"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2/stack"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_1"
  input: "SASMFGeoNet/d_geo_deconv4_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_2"
  input: "SASMFGeoNet/d_geo_deconv4_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice"
  input: "SASMFGeoNet/d_geo_deconv4_1/mul"
  input: "SASMFGeoNet/d_geo_deconv4_1/mul_1"
  input: "SASMFGeoNet/d_geo_deconv4_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/d_geo_deconv4_1/stack"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3/stack"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/d_geo_deconv4_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/d_geo_deconv4_1/stack"
  input: "SASMFGeoNet/d_geo_deconv4_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/d_geo_deconv4_1/conv2d_transpose"
  input: "SASMFGeoNet/d_geo_deconv4_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv4_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/n_geo_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice/stack"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice/stack_1"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1/stack"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2/stack"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_1"
  input: "SASMFGeoNet/n_geo_deconv4_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_2"
  input: "SASMFGeoNet/n_geo_deconv4_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice"
  input: "SASMFGeoNet/n_geo_deconv4_1/mul"
  input: "SASMFGeoNet/n_geo_deconv4_1/mul_1"
  input: "SASMFGeoNet/n_geo_deconv4_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/n_geo_deconv4_1/stack"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3/stack"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/n_geo_deconv4_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/n_geo_deconv4_1/stack"
  input: "SASMFGeoNet/n_geo_deconv4_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/n_geo_deconv4_1/conv2d_transpose"
  input: "SASMFGeoNet/n_geo_deconv4_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_1/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv4_1/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/biases"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_1/biases"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_1/biases"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/biases/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/biases/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/biases/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/Shape"
  op: "Shape"
  input: "SASMFGeoNet/c_geo_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice/stack"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice/stack_1"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1/stack"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1/stack_1"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv4_1/Shape"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2/stack"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2/stack_1"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_1"
  input: "SASMFGeoNet/c_geo_deconv4_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/mul_1"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_2"
  input: "SASMFGeoNet/c_geo_deconv4_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/stack"
  op: "Pack"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice"
  input: "SASMFGeoNet/c_geo_deconv4_1/mul"
  input: "SASMFGeoNet/c_geo_deconv4_1/mul_1"
  input: "SASMFGeoNet/c_geo_deconv4_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/c_geo_deconv4_1/stack"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3/stack"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3/stack_1"
  input: "SASMFGeoNet/c_geo_deconv4_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/conv2d_transpose/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "SASMFGeoNet/c_geo_deconv4_1/stack"
  input: "SASMFGeoNet/c_geo_deconv4_1/conv2d_transpose/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_1/BiasAdd"
  op: "BiasAdd"
  input: "SASMFGeoNet/c_geo_deconv4_1/conv2d_transpose"
  input: "SASMFGeoNet/c_geo_deconv4_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_concat4/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv2/Relu"
  input: "SASMFGeoNet/d_geo_deconv4_1/BiasAdd"
  input: "SASMFGeoNet/d_geo_concat4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_concat4/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv2/Relu"
  input: "SASMFGeoNet/n_geo_deconv4_1/BiasAdd"
  input: "SASMFGeoNet/n_geo_concat4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_concat4/concat"
  op: "ConcatV2"
  input: "SASMFGeoNet/geo_conv2/Relu"
  input: "SASMFGeoNet/c_geo_deconv4_1/BiasAdd"
  input: "SASMFGeoNet/c_geo_concat4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv4_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_concat4/concat"
  input: "SASMFGeoNet/d_geo_deconv4_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv4_2/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv4_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_concat4/concat"
  input: "SASMFGeoNet/n_geo_deconv4_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv4_2/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_2/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv4_2/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_concat4/concat"
  input: "SASMFGeoNet/c_geo_deconv4_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv4_2/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_2/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_deconv4_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_deconv4_2/Relu"
  input: "SASMFGeoNet/d_geo_deconv4_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_deconv4_3/Conv2D"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_deconv4_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_deconv4_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_deconv4_2/Relu"
  input: "SASMFGeoNet/n_geo_deconv4_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_deconv4_3/Conv2D"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_deconv4_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_3/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_deconv4_3/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_deconv4_2/Relu"
  input: "SASMFGeoNet/c_geo_deconv4_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_deconv4_3/Conv2D"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_deconv4_3/Relu"
  op: "Relu"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_output/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_output/weights"
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/weights"
  input: "SASMFGeoNet/d_geo_output/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Square"
  input: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/d_geo_output/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/d_geo_output/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/d_geo_deconv4_3/Relu"
  input: "SASMFGeoNet/d_geo_output/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/d_geo_output/Conv2D"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/Const"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/d_geo_output/Relu"
  op: "Relu"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_output/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_output/weights"
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/weights"
  input: "SASMFGeoNet/n_geo_output/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Square"
  input: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/n_geo_output/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/n_geo_output/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/n_geo_deconv4_3/Relu"
  input: "SASMFGeoNet/n_geo_output/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/n_geo_output/Conv2D"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/Const"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/n_geo_output/Relu"
  op: "Relu"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal"
  op: "AddV2"
  input: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/mul"
  input: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/weights"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_output/weights"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_output/weights"
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/weights"
  input: "SASMFGeoNet/c_geo_output/weights/Initializer/truncated_normal"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Square/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Square"
  op: "Square"
  input: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Square/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Sum"
  op: "Sum"
  input: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Square"
  input: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/kernel/Regularizer/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0002500000118743628
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/kernel/Regularizer/mul"
  op: "Mul"
  input: "SASMFGeoNet/c_geo_output/kernel/Regularizer/mul/x"
  input: "SASMFGeoNet/c_geo_output/kernel/Regularizer/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/weights"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/Conv2D"
  op: "Conv2D"
  input: "SASMFGeoNet/c_geo_deconv4_3/Relu"
  input: "SASMFGeoNet/c_geo_output/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/beta/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/BatchNorm/FusedBatchNormV3"
  op: "FusedBatchNormV3"
  input: "SASMFGeoNet/c_geo_output/Conv2D"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/Const"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/FusedBatchNormV3/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "U"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "exponential_avg_factor"
    value {
      f: 1.0
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "SASMFGeoNet/c_geo_output/Sigmoid"
  op: "Sigmoid"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/FusedBatchNormV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/output_d"
  op: "Identity"
  input: "SASMFGeoNet/d_geo_output/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/output_n"
  op: "Identity"
  input: "SASMFGeoNet/n_geo_output/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "SASMFGeoNet/output_c"
  op: "Identity"
  input: "SASMFGeoNet/c_geo_output/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "SASMFGeoNet/output_d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/Shape"
  op: "Shape"
  input: "shapeMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr/Shape"
  input: "slice_tenosr/strided_slice/stack"
  input: "slice_tenosr/strided_slice/stack_1"
  input: "slice_tenosr/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr/Shape_1"
  input: "slice_tenosr/strided_slice_1/stack"
  input: "slice_tenosr/strided_slice_1/stack_1"
  input: "slice_tenosr/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/sub"
  op: "Sub"
  input: "slice_tenosr/strided_slice"
  input: "slice_tenosr/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr/sub"
  input: "slice_tenosr/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr/Shape"
  input: "slice_tenosr/strided_slice_2/stack"
  input: "slice_tenosr/strided_slice_2/stack_1"
  input: "slice_tenosr/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr/Shape_1"
  input: "slice_tenosr/strided_slice_3/stack"
  input: "slice_tenosr/strided_slice_3/stack_1"
  input: "slice_tenosr/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/sub_1"
  op: "Sub"
  input: "slice_tenosr/strided_slice_2"
  input: "slice_tenosr/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr/sub_1"
  input: "slice_tenosr/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr/Shape_1"
  input: "slice_tenosr/strided_slice_4/stack"
  input: "slice_tenosr/strided_slice_4/stack_1"
  input: "slice_tenosr/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr/Shape_1"
  input: "slice_tenosr/strided_slice_5/stack"
  input: "slice_tenosr/strided_slice_5/stack_1"
  input: "slice_tenosr/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr/Slice/begin"
  op: "Pack"
  input: "slice_tenosr/Slice/begin/0"
  input: "slice_tenosr/floordiv"
  input: "slice_tenosr/floordiv_1"
  input: "slice_tenosr/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr/Slice/size"
  op: "Pack"
  input: "slice_tenosr/Slice/size/0"
  input: "slice_tenosr/strided_slice_4"
  input: "slice_tenosr/strided_slice_5"
  input: "slice_tenosr/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr/Slice"
  op: "Slice"
  input: "shapeMask_input"
  input: "slice_tenosr/Slice/begin"
  input: "slice_tenosr/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "slice_tenosr/Slice"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/mul"
  op: "Mul"
  input: "strided_slice"
  input: "strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/mul_1"
  op: "Mul"
  input: "zeros/mul"
  input: "strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros/mul_2"
  op: "Mul"
  input: "zeros/mul_1"
  input: "zeros/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros/Less"
  op: "Less"
  input: "zeros/mul_2"
  input: "zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros/packed/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros/packed"
  op: "Pack"
  input: "strided_slice"
  input: "strided_slice_1"
  input: "strided_slice_2"
  input: "zeros/packed/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros"
  op: "Fill"
  input: "zeros/packed"
  input: "zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul"
  op: "Mul"
  input: "strided_slice"
  input: "strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul_1"
  op: "Mul"
  input: "zeros_1/mul"
  input: "strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "zeros_1/mul_2"
  op: "Mul"
  input: "zeros_1/mul_1"
  input: "zeros_1/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_1/Less"
  op: "Less"
  input: "zeros_1/mul_2"
  input: "zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_1/packed/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "zeros_1/packed"
  op: "Pack"
  input: "strided_slice"
  input: "strided_slice_1"
  input: "strided_slice_2"
  input: "zeros_1/packed/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_1"
  op: "Fill"
  input: "zeros_1/packed"
  input: "zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_1"
  op: "Tile"
  input: "SASMFGeoNet/output_c"
  input: "Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/Shape"
  op: "Shape"
  input: "gtN_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr_1/Shape"
  input: "slice_tenosr_1/strided_slice/stack"
  input: "slice_tenosr_1/strided_slice/stack_1"
  input: "slice_tenosr_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr_1/Shape_1"
  input: "slice_tenosr_1/strided_slice_1/stack"
  input: "slice_tenosr_1/strided_slice_1/stack_1"
  input: "slice_tenosr_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_1/sub"
  op: "Sub"
  input: "slice_tenosr_1/strided_slice"
  input: "slice_tenosr_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr_1/sub"
  input: "slice_tenosr_1/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr_1/Shape"
  input: "slice_tenosr_1/strided_slice_2/stack"
  input: "slice_tenosr_1/strided_slice_2/stack_1"
  input: "slice_tenosr_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr_1/Shape_1"
  input: "slice_tenosr_1/strided_slice_3/stack"
  input: "slice_tenosr_1/strided_slice_3/stack_1"
  input: "slice_tenosr_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_1/sub_1"
  op: "Sub"
  input: "slice_tenosr_1/strided_slice_2"
  input: "slice_tenosr_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr_1/sub_1"
  input: "slice_tenosr_1/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr_1/Shape_1"
  input: "slice_tenosr_1/strided_slice_4/stack"
  input: "slice_tenosr_1/strided_slice_4/stack_1"
  input: "slice_tenosr_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr_1/Shape_1"
  input: "slice_tenosr_1/strided_slice_5/stack"
  input: "slice_tenosr_1/strided_slice_5/stack_1"
  input: "slice_tenosr_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_1/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_1/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_1/Slice/begin"
  op: "Pack"
  input: "slice_tenosr_1/Slice/begin/0"
  input: "slice_tenosr_1/floordiv"
  input: "slice_tenosr_1/floordiv_1"
  input: "slice_tenosr_1/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_1/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_1/Slice/size"
  op: "Pack"
  input: "slice_tenosr_1/Slice/size/0"
  input: "slice_tenosr_1/strided_slice_4"
  input: "slice_tenosr_1/strided_slice_5"
  input: "slice_tenosr_1/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_1/Slice"
  op: "Slice"
  input: "gtN_input"
  input: "slice_tenosr_1/Slice/begin"
  input: "slice_tenosr_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "slice_tenosr_1/Slice"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "Tile_1"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "mul"
  input: "zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error/assert_broadcastable/is_scalar"
  input: "mean_squared_error/assert_broadcastable/is_scalar"
  input: "mean_squared_error/assert_broadcastable/values/rank"
  input: "mean_squared_error/assert_broadcastable/weights/rank"
  input: "mean_squared_error/assert_broadcastable/values/shape"
  input: "mean_squared_error/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_assert_broadcastable_is_valid_shape_false_2749"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_assert_broadcastable_is_valid_shape_true_2748"
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Tile:0"
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error/assert_broadcastable/weights/shape"
  input: "mean_squared_error/assert_broadcastable/values/shape"
  input: "mean_squared_error/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_assert_broadcastable_AssertGuard_false_2799"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_assert_broadcastable_AssertGuard_true_2798"
      }
    }
  }
}
node {
  name: "mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error/Mul"
  op: "Mul"
  input: "mean_squared_error/SquaredDifference"
  input: "Tile"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error/Sum"
  op: "Sum"
  input: "mean_squared_error/Mul"
  input: "mean_squared_error/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error/num_present/Equal/y"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/Equal"
  op: "Equal"
  input: "Tile"
  input: "mean_squared_error/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error/num_present/zeros_like"
  op: "ZerosLike"
  input: "Tile"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error/num_present/ones_like/Shape"
  op: "Shape"
  input: "Tile"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/ones_like"
  op: "Fill"
  input: "mean_squared_error/num_present/ones_like/Shape"
  input: "mean_squared_error/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/Select"
  op: "Select"
  input: "mean_squared_error/num_present/Equal"
  input: "mean_squared_error/num_present/zeros_like"
  input: "mean_squared_error/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "mean_squared_error/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_2837"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_2836"
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error/num_present/Select:0"
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_2887"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_2886"
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "mean_squared_error/SquaredDifference"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/num_present/broadcast_weights"
  op: "Mul"
  input: "mean_squared_error/num_present/Select"
  input: "mean_squared_error/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error/num_present/Const"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error/num_present"
  op: "Sum"
  input: "mean_squared_error/num_present/broadcast_weights"
  input: "mean_squared_error/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error/Rank"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error/range/start"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error/range/delta"
  op: "Const"
  input: "^mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mean_squared_error/range"
  op: "Range"
  input: "mean_squared_error/range/start"
  input: "mean_squared_error/Rank"
  input: "mean_squared_error/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error/Sum_1"
  op: "Sum"
  input: "mean_squared_error/Sum"
  input: "mean_squared_error/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error/value"
  op: "DivNoNan"
  input: "mean_squared_error/Sum_1"
  input: "mean_squared_error/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/Sub"
  op: "Sub"
  input: "SASMFGeoNet/output_n"
  input: "slice_tenosr_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/Abs"
  op: "Abs"
  input: "absolute_difference/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/values/shape"
  op: "Shape"
  input: "absolute_difference/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "absolute_difference/assert_broadcastable/is_scalar/x"
  input: "absolute_difference/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "absolute_difference/assert_broadcastable/is_scalar"
  input: "absolute_difference/assert_broadcastable/is_scalar"
  input: "absolute_difference/assert_broadcastable/values/rank"
  input: "absolute_difference/assert_broadcastable/weights/rank"
  input: "absolute_difference/assert_broadcastable/values/shape"
  input: "absolute_difference/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_assert_broadcastable_is_valid_shape_false_2929"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_assert_broadcastable_is_valid_shape_true_2928"
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "absolute_difference/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Tile:0"
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "absolute_difference/Abs:0"
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/AssertGuard"
  op: "If"
  input: "absolute_difference/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference/assert_broadcastable/weights/shape"
  input: "absolute_difference/assert_broadcastable/values/shape"
  input: "absolute_difference/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_assert_broadcastable_AssertGuard_false_2979"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_assert_broadcastable_AssertGuard_true_2978"
      }
    }
  }
}
node {
  name: "absolute_difference/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "absolute_difference/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference/Mul"
  op: "Mul"
  input: "absolute_difference/Abs"
  input: "Tile"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/Const"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "absolute_difference/Sum"
  op: "Sum"
  input: "absolute_difference/Mul"
  input: "absolute_difference/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "absolute_difference/num_present/Equal/y"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/Equal"
  op: "Equal"
  input: "Tile"
  input: "absolute_difference/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "absolute_difference/num_present/zeros_like"
  op: "ZerosLike"
  input: "Tile"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/num_present/ones_like/Shape"
  op: "Shape"
  input: "Tile"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/num_present/ones_like/Const"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/ones_like"
  op: "Fill"
  input: "absolute_difference/num_present/ones_like/Shape"
  input: "absolute_difference/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/num_present/Select"
  op: "Select"
  input: "absolute_difference/num_present/Equal"
  input: "absolute_difference/num_present/zeros_like"
  input: "absolute_difference/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "absolute_difference/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "absolute_difference/Abs"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3017"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3016"
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "absolute_difference/num_present/Select:0"
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "absolute_difference/Abs:0"
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3067"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3066"
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "absolute_difference/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "absolute_difference/Abs"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  input: "^absolute_difference/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  input: "^absolute_difference/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "absolute_difference/num_present/broadcast_weights/ones_like/Shape"
  input: "absolute_difference/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/num_present/broadcast_weights"
  op: "Mul"
  input: "absolute_difference/num_present/Select"
  input: "absolute_difference/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference/num_present/Const"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "absolute_difference/num_present"
  op: "Sum"
  input: "absolute_difference/num_present/broadcast_weights"
  input: "absolute_difference/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "absolute_difference/Rank"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference/range/start"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference/range/delta"
  op: "Const"
  input: "^absolute_difference/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "absolute_difference/range"
  op: "Range"
  input: "absolute_difference/range/start"
  input: "absolute_difference/Rank"
  input: "absolute_difference/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference/Sum_1"
  op: "Sum"
  input: "absolute_difference/Sum"
  input: "absolute_difference/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "absolute_difference/value"
  op: "DivNoNan"
  input: "absolute_difference/Sum_1"
  input: "absolute_difference/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "slice_tenosr_2/Shape"
  op: "Shape"
  input: "gtD_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_2/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr_2/Shape"
  input: "slice_tenosr_2/strided_slice/stack"
  input: "slice_tenosr_2/strided_slice/stack_1"
  input: "slice_tenosr_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr_2/Shape_1"
  input: "slice_tenosr_2/strided_slice_1/stack"
  input: "slice_tenosr_2/strided_slice_1/stack_1"
  input: "slice_tenosr_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_2/sub"
  op: "Sub"
  input: "slice_tenosr_2/strided_slice"
  input: "slice_tenosr_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_2/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr_2/sub"
  input: "slice_tenosr_2/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr_2/Shape"
  input: "slice_tenosr_2/strided_slice_2/stack"
  input: "slice_tenosr_2/strided_slice_2/stack_1"
  input: "slice_tenosr_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr_2/Shape_1"
  input: "slice_tenosr_2/strided_slice_3/stack"
  input: "slice_tenosr_2/strided_slice_3/stack_1"
  input: "slice_tenosr_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_2/sub_1"
  op: "Sub"
  input: "slice_tenosr_2/strided_slice_2"
  input: "slice_tenosr_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_2/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr_2/sub_1"
  input: "slice_tenosr_2/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr_2/Shape_1"
  input: "slice_tenosr_2/strided_slice_4/stack"
  input: "slice_tenosr_2/strided_slice_4/stack_1"
  input: "slice_tenosr_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr_2/Shape_1"
  input: "slice_tenosr_2/strided_slice_5/stack"
  input: "slice_tenosr_2/strided_slice_5/stack_1"
  input: "slice_tenosr_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_2/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_2/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_2/Slice/begin"
  op: "Pack"
  input: "slice_tenosr_2/Slice/begin/0"
  input: "slice_tenosr_2/floordiv"
  input: "slice_tenosr_2/floordiv_1"
  input: "slice_tenosr_2/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_2/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_2/Slice/size"
  op: "Pack"
  input: "slice_tenosr_2/Slice/size/0"
  input: "slice_tenosr_2/strided_slice_4"
  input: "slice_tenosr_2/strided_slice_5"
  input: "slice_tenosr_2/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_2/Slice"
  op: "Slice"
  input: "gtD_input"
  input: "slice_tenosr_2/Slice/begin"
  input: "slice_tenosr_2/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "slice_tenosr_2/Slice"
  input: "SASMFGeoNet/output_d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "SASMFGeoNet/output_c"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_1/SquaredDifference"
  op: "SquaredDifference"
  input: "mul_1"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "slice_tenosr/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error_1/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error_1/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error_1/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error_1/assert_broadcastable/is_scalar"
  input: "mean_squared_error_1/assert_broadcastable/is_scalar"
  input: "mean_squared_error_1/assert_broadcastable/values/rank"
  input: "mean_squared_error_1/assert_broadcastable/weights/rank"
  input: "mean_squared_error_1/assert_broadcastable/values/shape"
  input: "mean_squared_error_1/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_1_assert_broadcastable_is_valid_shape_false_3149"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_1_assert_broadcastable_is_valid_shape_true_3148"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error_1/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "slice_tenosr/Slice:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_1/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error_1/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_1/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_1/assert_broadcastable/weights/shape"
  input: "mean_squared_error_1/assert_broadcastable/values/shape"
  input: "mean_squared_error_1/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_1_assert_broadcastable_AssertGuard_false_3199"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_1_assert_broadcastable_AssertGuard_true_3198"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error_1/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_1/Mul"
  op: "Mul"
  input: "mean_squared_error_1/SquaredDifference"
  input: "slice_tenosr/Slice"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_1/Const"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/Sum"
  op: "Sum"
  input: "mean_squared_error_1/Mul"
  input: "mean_squared_error_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/Equal/y"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/Equal"
  op: "Equal"
  input: "slice_tenosr/Slice"
  input: "mean_squared_error_1/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/zeros_like"
  op: "ZerosLike"
  input: "slice_tenosr/Slice"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/ones_like/Shape"
  op: "Shape"
  input: "slice_tenosr/Slice"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/ones_like"
  op: "Fill"
  input: "mean_squared_error_1/num_present/ones_like/Shape"
  input: "mean_squared_error_1/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/Select"
  op: "Select"
  input: "mean_squared_error_1/num_present/Equal"
  input: "mean_squared_error_1/num_present/zeros_like"
  input: "mean_squared_error_1/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "mean_squared_error_1/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error_1/SquaredDifference"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3237"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3236"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_1/num_present/Select:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_1/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3287"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3286"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "mean_squared_error_1/SquaredDifference"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "mean_squared_error_1/num_present/broadcast_weights/ones_like/Shape"
  input: "mean_squared_error_1/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/broadcast_weights"
  op: "Mul"
  input: "mean_squared_error_1/num_present/Select"
  input: "mean_squared_error_1/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_1/num_present/Const"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error_1/num_present"
  op: "Sum"
  input: "mean_squared_error_1/num_present/broadcast_weights"
  input: "mean_squared_error_1/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_1/Rank"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/range/start"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_1/range/delta"
  op: "Const"
  input: "^mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mean_squared_error_1/range"
  op: "Range"
  input: "mean_squared_error_1/range/start"
  input: "mean_squared_error_1/Rank"
  input: "mean_squared_error_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_1/Sum_1"
  op: "Sum"
  input: "mean_squared_error_1/Sum"
  input: "mean_squared_error_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_1/value"
  op: "DivNoNan"
  input: "mean_squared_error_1/Sum_1"
  input: "mean_squared_error_1/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/Sub"
  op: "Sub"
  input: "SASMFGeoNet/output_d"
  input: "slice_tenosr_2/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/Abs"
  op: "Abs"
  input: "absolute_difference_1/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "slice_tenosr/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/values/shape"
  op: "Shape"
  input: "absolute_difference_1/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "absolute_difference_1/assert_broadcastable/is_scalar/x"
  input: "absolute_difference_1/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "absolute_difference_1/assert_broadcastable/is_scalar"
  input: "absolute_difference_1/assert_broadcastable/is_scalar"
  input: "absolute_difference_1/assert_broadcastable/values/rank"
  input: "absolute_difference_1/assert_broadcastable/weights/rank"
  input: "absolute_difference_1/assert_broadcastable/values/shape"
  input: "absolute_difference_1/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_1_assert_broadcastable_is_valid_shape_false_3329"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_1_assert_broadcastable_is_valid_shape_true_3328"
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "absolute_difference_1/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "slice_tenosr/Slice:0"
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "absolute_difference_1/Abs:0"
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/AssertGuard"
  op: "If"
  input: "absolute_difference_1/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference_1/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference_1/assert_broadcastable/weights/shape"
  input: "absolute_difference_1/assert_broadcastable/values/shape"
  input: "absolute_difference_1/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_1_assert_broadcastable_AssertGuard_false_3379"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_1_assert_broadcastable_AssertGuard_true_3378"
      }
    }
  }
}
node {
  name: "absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "absolute_difference_1/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference_1/Mul"
  op: "Mul"
  input: "absolute_difference_1/Abs"
  input: "slice_tenosr/Slice"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/Const"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "absolute_difference_1/Sum"
  op: "Sum"
  input: "absolute_difference_1/Mul"
  input: "absolute_difference_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "absolute_difference_1/num_present/Equal/y"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/Equal"
  op: "Equal"
  input: "slice_tenosr/Slice"
  input: "absolute_difference_1/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "absolute_difference_1/num_present/zeros_like"
  op: "ZerosLike"
  input: "slice_tenosr/Slice"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/num_present/ones_like/Shape"
  op: "Shape"
  input: "slice_tenosr/Slice"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/num_present/ones_like/Const"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/ones_like"
  op: "Fill"
  input: "absolute_difference_1/num_present/ones_like/Shape"
  input: "absolute_difference_1/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/num_present/Select"
  op: "Select"
  input: "absolute_difference_1/num_present/Equal"
  input: "absolute_difference_1/num_present/zeros_like"
  input: "absolute_difference_1/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "absolute_difference_1/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "absolute_difference_1/Abs"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3417"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3416"
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "absolute_difference_1/num_present/Select:0"
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "absolute_difference_1/Abs:0"
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3467"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3466"
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "absolute_difference_1/Abs"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  input: "^absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  input: "^absolute_difference_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "absolute_difference_1/num_present/broadcast_weights/ones_like/Shape"
  input: "absolute_difference_1/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/num_present/broadcast_weights"
  op: "Mul"
  input: "absolute_difference_1/num_present/Select"
  input: "absolute_difference_1/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "absolute_difference_1/num_present/Const"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "absolute_difference_1/num_present"
  op: "Sum"
  input: "absolute_difference_1/num_present/broadcast_weights"
  input: "absolute_difference_1/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "absolute_difference_1/Rank"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference_1/range/start"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "absolute_difference_1/range/delta"
  op: "Const"
  input: "^absolute_difference_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "absolute_difference_1/range"
  op: "Range"
  input: "absolute_difference_1/range/start"
  input: "absolute_difference_1/Rank"
  input: "absolute_difference_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "absolute_difference_1/Sum_1"
  op: "Sum"
  input: "absolute_difference_1/Sum"
  input: "absolute_difference_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "absolute_difference_1/value"
  op: "DivNoNan"
  input: "absolute_difference_1/Sum_1"
  input: "absolute_difference_1/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_2"
  op: "Sub"
  input: "SASMFGeoNet/output_c"
  input: "sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_2/SquaredDifference"
  op: "SquaredDifference"
  input: "sub_2"
  input: "zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "slice_tenosr/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error_2/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error_2/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error_2/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error_2/assert_broadcastable/is_scalar"
  input: "mean_squared_error_2/assert_broadcastable/is_scalar"
  input: "mean_squared_error_2/assert_broadcastable/values/rank"
  input: "mean_squared_error_2/assert_broadcastable/weights/rank"
  input: "mean_squared_error_2/assert_broadcastable/values/shape"
  input: "mean_squared_error_2/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_2_assert_broadcastable_is_valid_shape_false_3510"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_2_assert_broadcastable_is_valid_shape_true_3509"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error_2/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "slice_tenosr/Slice:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_2/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error_2/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_2/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_2/assert_broadcastable/weights/shape"
  input: "mean_squared_error_2/assert_broadcastable/values/shape"
  input: "mean_squared_error_2/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_2_assert_broadcastable_AssertGuard_false_3560"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_2_assert_broadcastable_AssertGuard_true_3559"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error_2/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_2/Mul"
  op: "Mul"
  input: "mean_squared_error_2/SquaredDifference"
  input: "slice_tenosr/Slice"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_2/Const"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/Sum"
  op: "Sum"
  input: "mean_squared_error_2/Mul"
  input: "mean_squared_error_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/Equal/y"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/Equal"
  op: "Equal"
  input: "slice_tenosr/Slice"
  input: "mean_squared_error_2/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/zeros_like"
  op: "ZerosLike"
  input: "slice_tenosr/Slice"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/ones_like/Shape"
  op: "Shape"
  input: "slice_tenosr/Slice"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/ones_like"
  op: "Fill"
  input: "mean_squared_error_2/num_present/ones_like/Shape"
  input: "mean_squared_error_2/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/Select"
  op: "Select"
  input: "mean_squared_error_2/num_present/Equal"
  input: "mean_squared_error_2/num_present/zeros_like"
  input: "mean_squared_error_2/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "mean_squared_error_2/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error_2/SquaredDifference"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3598"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3597"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_2/num_present/Select:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_2/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3648"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3647"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "mean_squared_error_2/SquaredDifference"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error_2/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "mean_squared_error_2/num_present/broadcast_weights/ones_like/Shape"
  input: "mean_squared_error_2/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/broadcast_weights"
  op: "Mul"
  input: "mean_squared_error_2/num_present/Select"
  input: "mean_squared_error_2/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_2/num_present/Const"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error_2/num_present"
  op: "Sum"
  input: "mean_squared_error_2/num_present/broadcast_weights"
  input: "mean_squared_error_2/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_2/Rank"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/range/start"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_2/range/delta"
  op: "Const"
  input: "^mean_squared_error_2/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mean_squared_error_2/range"
  op: "Range"
  input: "mean_squared_error_2/range/start"
  input: "mean_squared_error_2/Rank"
  input: "mean_squared_error_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_2/Sum_1"
  op: "Sum"
  input: "mean_squared_error_2/Sum"
  input: "mean_squared_error_2/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_2/value"
  op: "DivNoNan"
  input: "mean_squared_error_2/Sum_1"
  input: "mean_squared_error_2/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "slice_tenosr_3/Shape"
  op: "Shape"
  input: "dsMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_3/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr_3/Shape"
  input: "slice_tenosr_3/strided_slice/stack"
  input: "slice_tenosr_3/strided_slice/stack_1"
  input: "slice_tenosr_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr_3/Shape_1"
  input: "slice_tenosr_3/strided_slice_1/stack"
  input: "slice_tenosr_3/strided_slice_1/stack_1"
  input: "slice_tenosr_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_3/sub"
  op: "Sub"
  input: "slice_tenosr_3/strided_slice"
  input: "slice_tenosr_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_3/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr_3/sub"
  input: "slice_tenosr_3/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr_3/Shape"
  input: "slice_tenosr_3/strided_slice_2/stack"
  input: "slice_tenosr_3/strided_slice_2/stack_1"
  input: "slice_tenosr_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr_3/Shape_1"
  input: "slice_tenosr_3/strided_slice_3/stack"
  input: "slice_tenosr_3/strided_slice_3/stack_1"
  input: "slice_tenosr_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_3/sub_1"
  op: "Sub"
  input: "slice_tenosr_3/strided_slice_2"
  input: "slice_tenosr_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_3/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr_3/sub_1"
  input: "slice_tenosr_3/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr_3/Shape_1"
  input: "slice_tenosr_3/strided_slice_4/stack"
  input: "slice_tenosr_3/strided_slice_4/stack_1"
  input: "slice_tenosr_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr_3/Shape_1"
  input: "slice_tenosr_3/strided_slice_5/stack"
  input: "slice_tenosr_3/strided_slice_5/stack_1"
  input: "slice_tenosr_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_3/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_3/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_3/Slice/begin"
  op: "Pack"
  input: "slice_tenosr_3/Slice/begin/0"
  input: "slice_tenosr_3/floordiv"
  input: "slice_tenosr_3/floordiv_1"
  input: "slice_tenosr_3/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_3/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_3/Slice/size"
  op: "Pack"
  input: "slice_tenosr_3/Slice/size/0"
  input: "slice_tenosr_3/strided_slice_4"
  input: "slice_tenosr_3/strided_slice_5"
  input: "slice_tenosr_3/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_3/Slice"
  op: "Slice"
  input: "dsMask_input"
  input: "slice_tenosr_3/Slice/begin"
  input: "slice_tenosr_3/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_3/SquaredDifference"
  op: "SquaredDifference"
  input: "SASMFGeoNet/output_d"
  input: "slice_tenosr_2/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "slice_tenosr_3/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error_3/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error_3/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error_3/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error_3/assert_broadcastable/is_scalar"
  input: "mean_squared_error_3/assert_broadcastable/is_scalar"
  input: "mean_squared_error_3/assert_broadcastable/values/rank"
  input: "mean_squared_error_3/assert_broadcastable/weights/rank"
  input: "mean_squared_error_3/assert_broadcastable/values/shape"
  input: "mean_squared_error_3/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_3_assert_broadcastable_is_valid_shape_false_3728"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_3_assert_broadcastable_is_valid_shape_true_3727"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error_3/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "slice_tenosr_3/Slice:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_3/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error_3/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_3/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_3/assert_broadcastable/weights/shape"
  input: "mean_squared_error_3/assert_broadcastable/values/shape"
  input: "mean_squared_error_3/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_3_assert_broadcastable_AssertGuard_false_3778"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_3_assert_broadcastable_AssertGuard_true_3777"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error_3/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_3/Mul"
  op: "Mul"
  input: "mean_squared_error_3/SquaredDifference"
  input: "slice_tenosr_3/Slice"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_3/Const"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/Sum"
  op: "Sum"
  input: "mean_squared_error_3/Mul"
  input: "mean_squared_error_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/Equal/y"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/Equal"
  op: "Equal"
  input: "slice_tenosr_3/Slice"
  input: "mean_squared_error_3/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/zeros_like"
  op: "ZerosLike"
  input: "slice_tenosr_3/Slice"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/ones_like/Shape"
  op: "Shape"
  input: "slice_tenosr_3/Slice"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/ones_like"
  op: "Fill"
  input: "mean_squared_error_3/num_present/ones_like/Shape"
  input: "mean_squared_error_3/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/Select"
  op: "Select"
  input: "mean_squared_error_3/num_present/Equal"
  input: "mean_squared_error_3/num_present/zeros_like"
  input: "mean_squared_error_3/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "mean_squared_error_3/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "mean_squared_error_3/SquaredDifference"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3816"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3815"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_3/num_present/Select:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "mean_squared_error_3/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3866"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3865"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "mean_squared_error_3/SquaredDifference"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  input: "^mean_squared_error_3/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "mean_squared_error_3/num_present/broadcast_weights/ones_like/Shape"
  input: "mean_squared_error_3/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/broadcast_weights"
  op: "Mul"
  input: "mean_squared_error_3/num_present/Select"
  input: "mean_squared_error_3/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mean_squared_error_3/num_present/Const"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "mean_squared_error_3/num_present"
  op: "Sum"
  input: "mean_squared_error_3/num_present/broadcast_weights"
  input: "mean_squared_error_3/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_3/Rank"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/range/start"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mean_squared_error_3/range/delta"
  op: "Const"
  input: "^mean_squared_error_3/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mean_squared_error_3/range"
  op: "Range"
  input: "mean_squared_error_3/range/start"
  input: "mean_squared_error_3/Rank"
  input: "mean_squared_error_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mean_squared_error_3/Sum_1"
  op: "Sum"
  input: "mean_squared_error_3/Sum"
  input: "mean_squared_error_3/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mean_squared_error_3/value"
  op: "DivNoNan"
  input: "mean_squared_error_3/Sum_1"
  input: "mean_squared_error_3/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "reg_loss/mul"
  op: "Mul"
  input: "SASMFGeoNet/output_n"
  input: "reg_loss/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "reg_loss/sub"
  op: "Sub"
  input: "reg_loss/mul"
  input: "reg_loss/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/Shape"
  op: "Shape"
  input: "SASMFGeoNet/output_d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice"
  op: "StridedSlice"
  input: "reg_loss/Shape"
  input: "reg_loss/strided_slice/stack"
  input: "reg_loss/strided_slice/stack_1"
  input: "reg_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_1"
  op: "StridedSlice"
  input: "reg_loss/Shape"
  input: "reg_loss/strided_slice_1/stack"
  input: "reg_loss/strided_slice_1/stack_1"
  input: "reg_loss/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_2"
  op: "StridedSlice"
  input: "reg_loss/Shape"
  input: "reg_loss/strided_slice_2/stack"
  input: "reg_loss/strided_slice_2/stack_1"
  input: "reg_loss/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Shape"
  op: "Shape"
  input: "shapeMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr/Shape"
  input: "reg_loss/slice_tenosr/strided_slice/stack"
  input: "reg_loss/slice_tenosr/strided_slice/stack_1"
  input: "reg_loss/slice_tenosr/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_1"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr/Shape_1"
  input: "reg_loss/slice_tenosr/strided_slice_1/stack"
  input: "reg_loss/slice_tenosr/strided_slice_1/stack_1"
  input: "reg_loss/slice_tenosr/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/sub"
  op: "Sub"
  input: "reg_loss/slice_tenosr/strided_slice"
  input: "reg_loss/slice_tenosr/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/floordiv"
  op: "FloorDiv"
  input: "reg_loss/slice_tenosr/sub"
  input: "reg_loss/slice_tenosr/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_2"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr/Shape"
  input: "reg_loss/slice_tenosr/strided_slice_2/stack"
  input: "reg_loss/slice_tenosr/strided_slice_2/stack_1"
  input: "reg_loss/slice_tenosr/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_3"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr/Shape_1"
  input: "reg_loss/slice_tenosr/strided_slice_3/stack"
  input: "reg_loss/slice_tenosr/strided_slice_3/stack_1"
  input: "reg_loss/slice_tenosr/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/sub_1"
  op: "Sub"
  input: "reg_loss/slice_tenosr/strided_slice_2"
  input: "reg_loss/slice_tenosr/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/floordiv_1"
  op: "FloorDiv"
  input: "reg_loss/slice_tenosr/sub_1"
  input: "reg_loss/slice_tenosr/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_4"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr/Shape_1"
  input: "reg_loss/slice_tenosr/strided_slice_4/stack"
  input: "reg_loss/slice_tenosr/strided_slice_4/stack_1"
  input: "reg_loss/slice_tenosr/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/strided_slice_5"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr/Shape_1"
  input: "reg_loss/slice_tenosr/strided_slice_5/stack"
  input: "reg_loss/slice_tenosr/strided_slice_5/stack_1"
  input: "reg_loss/slice_tenosr/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice/begin"
  op: "Pack"
  input: "reg_loss/slice_tenosr/Slice/begin/0"
  input: "reg_loss/slice_tenosr/floordiv"
  input: "reg_loss/slice_tenosr/floordiv_1"
  input: "reg_loss/slice_tenosr/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice/size"
  op: "Pack"
  input: "reg_loss/slice_tenosr/Slice/size/0"
  input: "reg_loss/slice_tenosr/strided_slice_4"
  input: "reg_loss/slice_tenosr/strided_slice_5"
  input: "reg_loss/slice_tenosr/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/slice_tenosr/Slice"
  op: "Slice"
  input: "shapeMask_input"
  input: "reg_loss/slice_tenosr/Slice/begin"
  input: "reg_loss/slice_tenosr/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Shape"
  op: "Shape"
  input: "clIMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_1/Shape"
  input: "reg_loss/slice_tenosr_1/strided_slice/stack"
  input: "reg_loss/slice_tenosr_1/strided_slice/stack_1"
  input: "reg_loss/slice_tenosr_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_1"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_1/Shape_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_1/stack"
  input: "reg_loss/slice_tenosr_1/strided_slice_1/stack_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/sub"
  op: "Sub"
  input: "reg_loss/slice_tenosr_1/strided_slice"
  input: "reg_loss/slice_tenosr_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/floordiv"
  op: "FloorDiv"
  input: "reg_loss/slice_tenosr_1/sub"
  input: "reg_loss/slice_tenosr_1/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_2"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_1/Shape"
  input: "reg_loss/slice_tenosr_1/strided_slice_2/stack"
  input: "reg_loss/slice_tenosr_1/strided_slice_2/stack_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_3"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_1/Shape_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_3/stack"
  input: "reg_loss/slice_tenosr_1/strided_slice_3/stack_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/sub_1"
  op: "Sub"
  input: "reg_loss/slice_tenosr_1/strided_slice_2"
  input: "reg_loss/slice_tenosr_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/floordiv_1"
  op: "FloorDiv"
  input: "reg_loss/slice_tenosr_1/sub_1"
  input: "reg_loss/slice_tenosr_1/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_4"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_1/Shape_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_4/stack"
  input: "reg_loss/slice_tenosr_1/strided_slice_4/stack_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/strided_slice_5"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_1/Shape_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_5/stack"
  input: "reg_loss/slice_tenosr_1/strided_slice_5/stack_1"
  input: "reg_loss/slice_tenosr_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice/begin"
  op: "Pack"
  input: "reg_loss/slice_tenosr_1/Slice/begin/0"
  input: "reg_loss/slice_tenosr_1/floordiv"
  input: "reg_loss/slice_tenosr_1/floordiv_1"
  input: "reg_loss/slice_tenosr_1/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice/size"
  op: "Pack"
  input: "reg_loss/slice_tenosr_1/Slice/size/0"
  input: "reg_loss/slice_tenosr_1/strided_slice_4"
  input: "reg_loss/slice_tenosr_1/strided_slice_5"
  input: "reg_loss/slice_tenosr_1/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_1/Slice"
  op: "Slice"
  input: "clIMask_input"
  input: "reg_loss/slice_tenosr_1/Slice/begin"
  input: "reg_loss/slice_tenosr_1/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Shape"
  op: "Shape"
  input: "fLInvMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_d"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_2/Shape"
  input: "reg_loss/slice_tenosr_2/strided_slice/stack"
  input: "reg_loss/slice_tenosr_2/strided_slice/stack_1"
  input: "reg_loss/slice_tenosr_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_1"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_2/Shape_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_1/stack"
  input: "reg_loss/slice_tenosr_2/strided_slice_1/stack_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/sub"
  op: "Sub"
  input: "reg_loss/slice_tenosr_2/strided_slice"
  input: "reg_loss/slice_tenosr_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/floordiv"
  op: "FloorDiv"
  input: "reg_loss/slice_tenosr_2/sub"
  input: "reg_loss/slice_tenosr_2/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_2"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_2/Shape"
  input: "reg_loss/slice_tenosr_2/strided_slice_2/stack"
  input: "reg_loss/slice_tenosr_2/strided_slice_2/stack_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_3"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_2/Shape_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_3/stack"
  input: "reg_loss/slice_tenosr_2/strided_slice_3/stack_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/sub_1"
  op: "Sub"
  input: "reg_loss/slice_tenosr_2/strided_slice_2"
  input: "reg_loss/slice_tenosr_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/floordiv_1"
  op: "FloorDiv"
  input: "reg_loss/slice_tenosr_2/sub_1"
  input: "reg_loss/slice_tenosr_2/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_4"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_2/Shape_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_4/stack"
  input: "reg_loss/slice_tenosr_2/strided_slice_4/stack_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/strided_slice_5"
  op: "StridedSlice"
  input: "reg_loss/slice_tenosr_2/Shape_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_5/stack"
  input: "reg_loss/slice_tenosr_2/strided_slice_5/stack_1"
  input: "reg_loss/slice_tenosr_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice/begin"
  op: "Pack"
  input: "reg_loss/slice_tenosr_2/Slice/begin/0"
  input: "reg_loss/slice_tenosr_2/floordiv"
  input: "reg_loss/slice_tenosr_2/floordiv_1"
  input: "reg_loss/slice_tenosr_2/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice/size"
  op: "Pack"
  input: "reg_loss/slice_tenosr_2/Slice/size/0"
  input: "reg_loss/slice_tenosr_2/strided_slice_4"
  input: "reg_loss/slice_tenosr_2/strided_slice_5"
  input: "reg_loss/slice_tenosr_2/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/slice_tenosr_2/Slice"
  op: "Slice"
  input: "fLInvMask_input"
  input: "reg_loss/slice_tenosr_2/Slice/begin"
  input: "reg_loss/slice_tenosr_2/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mul_1"
  op: "Mul"
  input: "reg_loss/slice_tenosr/Slice"
  input: "reg_loss/slice_tenosr_1/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mul_2"
  op: "Mul"
  input: "reg_loss/mul_1"
  input: "reg_loss/slice_tenosr_2/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_1"
  op: "Sub"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice/size/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice/size"
  op: "Pack"
  input: "reg_loss/Slice/size/0"
  input: "reg_loss/Slice/size/1"
  input: "reg_loss/sub_1"
  input: "reg_loss/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/Slice"
  op: "Slice"
  input: "reg_loss/mul_2"
  input: "reg_loss/Slice/begin"
  input: "reg_loss/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_2"
  op: "Sub"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/Slice_1/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_1/size/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_1/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_1/size"
  op: "Pack"
  input: "reg_loss/Slice_1/size/0"
  input: "reg_loss/sub_2"
  input: "reg_loss/Slice_1/size/2"
  input: "reg_loss/Slice_1/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/Slice_1"
  op: "Slice"
  input: "reg_loss/mul_2"
  input: "reg_loss/Slice_1/begin"
  input: "reg_loss/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_3"
  op: "Sub"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/sub_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Fill/dims/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/Fill/dims"
  op: "Pack"
  input: "reg_loss/strided_slice"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_3"
  input: "reg_loss/Fill/dims/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007843137718737125
      }
    }
  }
}
node {
  name: "reg_loss/Fill"
  op: "Fill"
  input: "reg_loss/Fill/dims"
  input: "reg_loss/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/sub_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_4"
  op: "Sub"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros/mul"
  op: "Mul"
  input: "reg_loss/strided_slice"
  input: "reg_loss/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros/mul_1"
  op: "Mul"
  input: "reg_loss/zeros/mul"
  input: "reg_loss/sub_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/zeros/mul_2"
  op: "Mul"
  input: "reg_loss/zeros/mul_1"
  input: "reg_loss/zeros/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "reg_loss/zeros/Less"
  op: "Less"
  input: "reg_loss/zeros/mul_2"
  input: "reg_loss/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros/packed/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/zeros/packed"
  op: "Pack"
  input: "reg_loss/strided_slice"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_4"
  input: "reg_loss/zeros/packed/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "reg_loss/zeros"
  op: "Fill"
  input: "reg_loss/zeros/packed"
  input: "reg_loss/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_3"
  op: "StridedSlice"
  input: "SASMFGeoNet/output_d"
  input: "reg_loss/strided_slice_3/stack"
  input: "reg_loss/strided_slice_3/stack_1"
  input: "reg_loss/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 11
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 15
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\377\377\377\377\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_4"
  op: "StridedSlice"
  input: "SASMFGeoNet/output_d"
  input: "reg_loss/strided_slice_4/stack"
  input: "reg_loss/strided_slice_4/stack_1"
  input: "reg_loss/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 15
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 11
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/sub_5"
  op: "Sub"
  input: "reg_loss/strided_slice_3"
  input: "reg_loss/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/concat"
  op: "ConcatV2"
  input: "reg_loss/Fill"
  input: "reg_loss/zeros"
  input: "reg_loss/sub_5"
  input: "reg_loss/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007843137718737125
      }
    }
  }
}
node {
  name: "reg_loss/truediv"
  op: "RealDiv"
  input: "reg_loss/concat"
  input: "reg_loss/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_6"
  op: "Sub"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_1/mul"
  op: "Mul"
  input: "reg_loss/strided_slice"
  input: "reg_loss/sub_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_1/mul_1"
  op: "Mul"
  input: "reg_loss/zeros_1/mul"
  input: "reg_loss/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_1/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/zeros_1/mul_2"
  op: "Mul"
  input: "reg_loss/zeros_1/mul_1"
  input: "reg_loss/zeros_1/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_1/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "reg_loss/zeros_1/Less"
  op: "Less"
  input: "reg_loss/zeros_1/mul_2"
  input: "reg_loss/zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_1/packed/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/zeros_1/packed"
  op: "Pack"
  input: "reg_loss/strided_slice"
  input: "reg_loss/sub_6"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/zeros_1/packed/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "reg_loss/zeros_1"
  op: "Fill"
  input: "reg_loss/zeros_1/packed"
  input: "reg_loss/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/sub_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_7"
  op: "Sub"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Fill_1/dims/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/Fill_1/dims"
  op: "Pack"
  input: "reg_loss/strided_slice"
  input: "reg_loss/sub_7"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/Fill_1/dims/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/Fill_1/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007843137718737125
      }
    }
  }
}
node {
  name: "reg_loss/Fill_1"
  op: "Fill"
  input: "reg_loss/Fill_1/dims"
  input: "reg_loss/Fill_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_5"
  op: "StridedSlice"
  input: "SASMFGeoNet/output_d"
  input: "reg_loss/strided_slice_5/stack"
  input: "reg_loss/strided_slice_5/stack_1"
  input: "reg_loss/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 13
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 15
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\377\377\377\377\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/strided_slice_6"
  op: "StridedSlice"
  input: "SASMFGeoNet/output_d"
  input: "reg_loss/strided_slice_6/stack"
  input: "reg_loss/strided_slice_6/stack_1"
  input: "reg_loss/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 15
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 13
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/sub_8"
  op: "Sub"
  input: "reg_loss/strided_slice_5"
  input: "reg_loss/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/concat_1"
  op: "ConcatV2"
  input: "reg_loss/zeros_1"
  input: "reg_loss/Fill_1"
  input: "reg_loss/sub_8"
  input: "reg_loss/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007843137718737125
      }
    }
  }
}
node {
  name: "reg_loss/truediv_1"
  op: "RealDiv"
  input: "reg_loss/concat_1"
  input: "reg_loss/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_9"
  op: "Sub"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/sub_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/Slice_2/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_2/size/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_2/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_2/size"
  op: "Pack"
  input: "reg_loss/Slice_2/size/0"
  input: "reg_loss/Slice_2/size/1"
  input: "reg_loss/sub_9"
  input: "reg_loss/Slice_2/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/Slice_2"
  op: "Slice"
  input: "reg_loss/sub"
  input: "reg_loss/Slice_2/begin"
  input: "reg_loss/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/sub_10/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_10"
  op: "Sub"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_10/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/Slice_3/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_3/size/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_3/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "reg_loss/Slice_3/size"
  op: "Pack"
  input: "reg_loss/Slice_3/size/0"
  input: "reg_loss/sub_10"
  input: "reg_loss/Slice_3/size/2"
  input: "reg_loss/Slice_3/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/Slice_3"
  op: "Slice"
  input: "reg_loss/sub"
  input: "reg_loss/Slice_3/begin"
  input: "reg_loss/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mul_3"
  op: "Mul"
  input: "reg_loss/truediv"
  input: "reg_loss/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/Sum"
  op: "Sum"
  input: "reg_loss/mul_3"
  input: "reg_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/sub_11/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_11"
  op: "Sub"
  input: "reg_loss/strided_slice_2"
  input: "reg_loss/sub_11/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_2/mul"
  op: "Mul"
  input: "reg_loss/strided_slice"
  input: "reg_loss/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_2/mul_1"
  op: "Mul"
  input: "reg_loss/zeros_2/mul"
  input: "reg_loss/sub_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_2/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "reg_loss/zeros_2/Less"
  op: "Less"
  input: "reg_loss/zeros_2/mul_1"
  input: "reg_loss/zeros_2/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_2/packed"
  op: "Pack"
  input: "reg_loss/strided_slice"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_11"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "reg_loss/zeros_2"
  op: "Fill"
  input: "reg_loss/zeros_2/packed"
  input: "reg_loss/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Squeeze"
  op: "Squeeze"
  input: "reg_loss/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "reg_loss/Sum"
  input: "reg_loss/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "reg_loss/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_scalar/x"
  input: "reg_loss/mean_squared_error/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error/assert_broadcastable/values/rank"
  input: "reg_loss/mean_squared_error/assert_broadcastable/weights/rank"
  input: "reg_loss/mean_squared_error/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_false_4150"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_true_4149"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/Squeeze:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/mean_squared_error/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/AssertGuard"
  op: "If"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error/assert_broadcastable/weights/shape"
  input: "reg_loss/mean_squared_error/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_assert_broadcastable_AssertGuard_false_4200"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_assert_broadcastable_AssertGuard_true_4199"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/Mul"
  op: "Mul"
  input: "reg_loss/mean_squared_error/SquaredDifference"
  input: "reg_loss/Squeeze"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/Sum"
  op: "Sum"
  input: "reg_loss/mean_squared_error/Mul"
  input: "reg_loss/mean_squared_error/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/Equal/y"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/Equal"
  op: "Equal"
  input: "reg_loss/Squeeze"
  input: "reg_loss/mean_squared_error/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/zeros_like"
  op: "ZerosLike"
  input: "reg_loss/Squeeze"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/ones_like/Shape"
  op: "Shape"
  input: "reg_loss/Squeeze"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/ones_like/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/ones_like"
  op: "Fill"
  input: "reg_loss/mean_squared_error/num_present/ones_like/Shape"
  input: "reg_loss/mean_squared_error/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/Select"
  op: "Select"
  input: "reg_loss/mean_squared_error/num_present/Equal"
  input: "reg_loss/mean_squared_error/num_present/zeros_like"
  input: "reg_loss/mean_squared_error/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error/SquaredDifference"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_4238"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_4237"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/mean_squared_error/num_present/Select:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/mean_squared_error/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_4288"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_4287"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error/SquaredDifference"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  input: "^reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  input: "^reg_loss/mean_squared_error/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/ones_like/Shape"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/broadcast_weights"
  op: "Mul"
  input: "reg_loss/mean_squared_error/num_present/Select"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/num_present"
  op: "Sum"
  input: "reg_loss/mean_squared_error/num_present/broadcast_weights"
  input: "reg_loss/mean_squared_error/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/Rank"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/range/start"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/range/delta"
  op: "Const"
  input: "^reg_loss/mean_squared_error/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/range"
  op: "Range"
  input: "reg_loss/mean_squared_error/range/start"
  input: "reg_loss/mean_squared_error/Rank"
  input: "reg_loss/mean_squared_error/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/Sum_1"
  op: "Sum"
  input: "reg_loss/mean_squared_error/Sum"
  input: "reg_loss/mean_squared_error/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/mean_squared_error/value"
  op: "DivNoNan"
  input: "reg_loss/mean_squared_error/Sum_1"
  input: "reg_loss/mean_squared_error/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mul_4"
  op: "Mul"
  input: "reg_loss/truediv_1"
  input: "reg_loss/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/Sum_1"
  op: "Sum"
  input: "reg_loss/mul_4"
  input: "reg_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/sub_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/sub_12"
  op: "Sub"
  input: "reg_loss/strided_slice_1"
  input: "reg_loss/sub_12/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_3/mul"
  op: "Mul"
  input: "reg_loss/strided_slice"
  input: "reg_loss/sub_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_3/mul_1"
  op: "Mul"
  input: "reg_loss/zeros_3/mul"
  input: "reg_loss/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_3/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "reg_loss/zeros_3/Less"
  op: "Less"
  input: "reg_loss/zeros_3/mul_1"
  input: "reg_loss/zeros_3/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/zeros_3/packed"
  op: "Pack"
  input: "reg_loss/strided_slice"
  input: "reg_loss/sub_12"
  input: "reg_loss/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "reg_loss/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "reg_loss/zeros_3"
  op: "Fill"
  input: "reg_loss/zeros_3/packed"
  input: "reg_loss/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/Squeeze_1"
  op: "Squeeze"
  input: "reg_loss/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/SquaredDifference"
  op: "SquaredDifference"
  input: "reg_loss/Sum_1"
  input: "reg_loss/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "reg_loss/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/values/shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error_1/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/is_scalar/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_scalar/x"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/values/rank"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/weights/rank"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_false_4342"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_true_4341"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/Squeeze_1:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/mean_squared_error_1/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard"
  op: "If"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/weights/shape"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_assert_broadcastable_AssertGuard_false_4392"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_assert_broadcastable_AssertGuard_true_4391"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/Mul"
  op: "Mul"
  input: "reg_loss/mean_squared_error_1/SquaredDifference"
  input: "reg_loss/Squeeze_1"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/Sum"
  op: "Sum"
  input: "reg_loss/mean_squared_error_1/Mul"
  input: "reg_loss/mean_squared_error_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/Equal/y"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/Equal"
  op: "Equal"
  input: "reg_loss/Squeeze_1"
  input: "reg_loss/mean_squared_error_1/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/zeros_like"
  op: "ZerosLike"
  input: "reg_loss/Squeeze_1"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/ones_like/Shape"
  op: "Shape"
  input: "reg_loss/Squeeze_1"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/ones_like/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/ones_like"
  op: "Fill"
  input: "reg_loss/mean_squared_error_1/num_present/ones_like/Shape"
  input: "reg_loss/mean_squared_error_1/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/Select"
  op: "Select"
  input: "reg_loss/mean_squared_error_1/num_present/Equal"
  input: "reg_loss/mean_squared_error_1/num_present/zeros_like"
  input: "reg_loss/mean_squared_error_1/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error_1/num_present/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error_1/SquaredDifference"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  op: "Equal"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar/x"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  op: "StatelessIf"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/rank"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_4430"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_4429"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights can not be broadcast to values."
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_1"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "weights.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_2"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/mean_squared_error_1/num_present/Select:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_3"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "values.shape="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_4"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "reg_loss/mean_squared_error_1/SquaredDifference:0"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/Const_5"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "is_scalar="
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  op: "If"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_valid_shape/Identity"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/values/shape"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/is_scalar"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT32
        type: DT_INT32
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_4480"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_4479"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  op: "Identity"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "reg_loss/mean_squared_error_1/SquaredDifference"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  input: "^reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  input: "^reg_loss/mean_squared_error_1/num_present/broadcast_weights/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/ones_like/Shape"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/broadcast_weights"
  op: "Mul"
  input: "reg_loss/mean_squared_error_1/num_present/Select"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present/Const"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/num_present"
  op: "Sum"
  input: "reg_loss/mean_squared_error_1/num_present/broadcast_weights"
  input: "reg_loss/mean_squared_error_1/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/Rank"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/range/start"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/range/delta"
  op: "Const"
  input: "^reg_loss/mean_squared_error_1/assert_broadcastable/AssertGuard/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/range"
  op: "Range"
  input: "reg_loss/mean_squared_error_1/range/start"
  input: "reg_loss/mean_squared_error_1/Rank"
  input: "reg_loss/mean_squared_error_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/Sum_1"
  op: "Sum"
  input: "reg_loss/mean_squared_error_1/Sum"
  input: "reg_loss/mean_squared_error_1/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "reg_loss/mean_squared_error_1/value"
  op: "DivNoNan"
  input: "reg_loss/mean_squared_error_1/Sum_1"
  input: "reg_loss/mean_squared_error_1/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "reg_loss/add"
  op: "AddV2"
  input: "reg_loss/mean_squared_error/value"
  input: "reg_loss/mean_squared_error_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 920.0
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "mul_2/x"
  input: "mean_squared_error_1/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 430.0
      }
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "mul_3/x"
  input: "mean_squared_error/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add"
  op: "AddV2"
  input: "mul_2"
  input: "mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_1"
  op: "AddV2"
  input: "add"
  input: "mean_squared_error_2/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "mul_4"
  op: "Mul"
  input: "mul_4/x"
  input: "mean_squared_error_3/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_2"
  op: "AddV2"
  input: "add_1"
  input: "mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "mul_5/x"
  input: "reg_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_3"
  op: "AddV2"
  input: "add_2"
  input: "mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "slice_tenosr_4/Shape"
  op: "Shape"
  input: "shapeMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_4/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr_4/Shape"
  input: "slice_tenosr_4/strided_slice/stack"
  input: "slice_tenosr_4/strided_slice/stack_1"
  input: "slice_tenosr_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr_4/Shape_1"
  input: "slice_tenosr_4/strided_slice_1/stack"
  input: "slice_tenosr_4/strided_slice_1/stack_1"
  input: "slice_tenosr_4/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_4/sub"
  op: "Sub"
  input: "slice_tenosr_4/strided_slice"
  input: "slice_tenosr_4/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_4/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr_4/sub"
  input: "slice_tenosr_4/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr_4/Shape"
  input: "slice_tenosr_4/strided_slice_2/stack"
  input: "slice_tenosr_4/strided_slice_2/stack_1"
  input: "slice_tenosr_4/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr_4/Shape_1"
  input: "slice_tenosr_4/strided_slice_3/stack"
  input: "slice_tenosr_4/strided_slice_3/stack_1"
  input: "slice_tenosr_4/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_4/sub_1"
  op: "Sub"
  input: "slice_tenosr_4/strided_slice_2"
  input: "slice_tenosr_4/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_4/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr_4/sub_1"
  input: "slice_tenosr_4/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr_4/Shape_1"
  input: "slice_tenosr_4/strided_slice_4/stack"
  input: "slice_tenosr_4/strided_slice_4/stack_1"
  input: "slice_tenosr_4/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr_4/Shape_1"
  input: "slice_tenosr_4/strided_slice_5/stack"
  input: "slice_tenosr_4/strided_slice_5/stack_1"
  input: "slice_tenosr_4/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_4/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_4/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_4/Slice/begin"
  op: "Pack"
  input: "slice_tenosr_4/Slice/begin/0"
  input: "slice_tenosr_4/floordiv"
  input: "slice_tenosr_4/floordiv_1"
  input: "slice_tenosr_4/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_4/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_4/Slice/size"
  op: "Pack"
  input: "slice_tenosr_4/Slice/size/0"
  input: "slice_tenosr_4/strided_slice_4"
  input: "slice_tenosr_4/strided_slice_5"
  input: "slice_tenosr_4/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_4/Slice"
  op: "Slice"
  input: "shapeMask_input"
  input: "slice_tenosr_4/Slice/begin"
  input: "slice_tenosr_4/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Tile_2/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_2"
  op: "Tile"
  input: "slice_tenosr_4/Slice"
  input: "Tile_2/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile_3/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_3"
  op: "Tile"
  input: "slice_tenosr_4/Slice"
  input: "Tile_3/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile_4/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "Tile_4"
  op: "Tile"
  input: "clIMask_input"
  input: "Tile_4/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/Shape"
  op: "Shape"
  input: "gtField_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr_5/Shape"
  input: "slice_tenosr_5/strided_slice/stack"
  input: "slice_tenosr_5/strided_slice/stack_1"
  input: "slice_tenosr_5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr_5/Shape_1"
  input: "slice_tenosr_5/strided_slice_1/stack"
  input: "slice_tenosr_5/strided_slice_1/stack_1"
  input: "slice_tenosr_5/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_5/sub"
  op: "Sub"
  input: "slice_tenosr_5/strided_slice"
  input: "slice_tenosr_5/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr_5/sub"
  input: "slice_tenosr_5/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr_5/Shape"
  input: "slice_tenosr_5/strided_slice_2/stack"
  input: "slice_tenosr_5/strided_slice_2/stack_1"
  input: "slice_tenosr_5/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr_5/Shape_1"
  input: "slice_tenosr_5/strided_slice_3/stack"
  input: "slice_tenosr_5/strided_slice_3/stack_1"
  input: "slice_tenosr_5/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_5/sub_1"
  op: "Sub"
  input: "slice_tenosr_5/strided_slice_2"
  input: "slice_tenosr_5/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr_5/sub_1"
  input: "slice_tenosr_5/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr_5/Shape_1"
  input: "slice_tenosr_5/strided_slice_4/stack"
  input: "slice_tenosr_5/strided_slice_4/stack_1"
  input: "slice_tenosr_5/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr_5/Shape_1"
  input: "slice_tenosr_5/strided_slice_5/stack"
  input: "slice_tenosr_5/strided_slice_5/stack_1"
  input: "slice_tenosr_5/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_5/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_5/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_5/Slice/begin"
  op: "Pack"
  input: "slice_tenosr_5/Slice/begin/0"
  input: "slice_tenosr_5/floordiv"
  input: "slice_tenosr_5/floordiv_1"
  input: "slice_tenosr_5/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_5/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_5/Slice/size"
  op: "Pack"
  input: "slice_tenosr_5/Slice/size/0"
  input: "slice_tenosr_5/strided_slice_4"
  input: "slice_tenosr_5/strided_slice_5"
  input: "slice_tenosr_5/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_5/Slice"
  op: "Slice"
  input: "gtField_input"
  input: "slice_tenosr_5/Slice/begin"
  input: "slice_tenosr_5/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "slice_tenosr_5/Slice"
  input: "Tile_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_7"
  op: "Mul"
  input: "SASFieldNet/output_f"
  input: "Tile_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_8"
  op: "Mul"
  input: "mul_7"
  input: "Tile_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_4"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_4/stack"
  input: "strided_slice_4/stack_1"
  input: "strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_5"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_5/stack"
  input: "strided_slice_5/stack_1"
  input: "strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "zeros_2/mul"
  op: "Mul"
  input: "strided_slice_3"
  input: "strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_2/mul_1"
  op: "Mul"
  input: "zeros_2/mul"
  input: "strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_2/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros_2/mul_2"
  op: "Mul"
  input: "zeros_2/mul_1"
  input: "zeros_2/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_2/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "zeros_2/Less"
  op: "Less"
  input: "zeros_2/mul_2"
  input: "zeros_2/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "zeros_2/packed/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "zeros_2/packed"
  op: "Pack"
  input: "strided_slice_3"
  input: "strided_slice_4"
  input: "strided_slice_5"
  input: "zeros_2/packed/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "zeros_2"
  op: "Fill"
  input: "zeros_2/packed"
  input: "zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "mul_6"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "Slice"
  input: "zeros_2"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_1"
  op: "Slice"
  input: "mul_6"
  input: "Slice_1/begin"
  input: "Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "Slice_1"
  input: "zeros_2"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_2"
  op: "Slice"
  input: "mul_8"
  input: "Slice_2/begin"
  input: "Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "Slice_2"
  input: "zeros_2"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "Slice_3"
  op: "Slice"
  input: "mul_8"
  input: "Slice_3/begin"
  input: "Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concat_3"
  op: "ConcatV2"
  input: "Slice_3"
  input: "zeros_2"
  input: "concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mul_9"
  op: "Mul"
  input: "slice_tenosr_1/Slice"
  input: "Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_10"
  op: "Mul"
  input: "SASMFGeoNet/output_n"
  input: "Tile_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_11"
  op: "Mul"
  input: "slice_tenosr_2/Slice"
  input: "slice_tenosr_4/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_12"
  op: "Mul"
  input: "SASMFGeoNet/output_d"
  input: "slice_tenosr_4/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_13"
  op: "Mul"
  input: "ds_input"
  input: "slice_tenosr_4/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "slice_tenosr_6/Shape"
  op: "Shape"
  input: "clIMask_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_6/Shape_1"
  op: "Shape"
  input: "SASMFGeoNet/output_n"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice"
  op: "StridedSlice"
  input: "slice_tenosr_6/Shape"
  input: "slice_tenosr_6/strided_slice/stack"
  input: "slice_tenosr_6/strided_slice/stack_1"
  input: "slice_tenosr_6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_1"
  op: "StridedSlice"
  input: "slice_tenosr_6/Shape_1"
  input: "slice_tenosr_6/strided_slice_1/stack"
  input: "slice_tenosr_6/strided_slice_1/stack_1"
  input: "slice_tenosr_6/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_6/sub"
  op: "Sub"
  input: "slice_tenosr_6/strided_slice"
  input: "slice_tenosr_6/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_6/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/floordiv"
  op: "FloorDiv"
  input: "slice_tenosr_6/sub"
  input: "slice_tenosr_6/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_2"
  op: "StridedSlice"
  input: "slice_tenosr_6/Shape"
  input: "slice_tenosr_6/strided_slice_2/stack"
  input: "slice_tenosr_6/strided_slice_2/stack_1"
  input: "slice_tenosr_6/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_3"
  op: "StridedSlice"
  input: "slice_tenosr_6/Shape_1"
  input: "slice_tenosr_6/strided_slice_3/stack"
  input: "slice_tenosr_6/strided_slice_3/stack_1"
  input: "slice_tenosr_6/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_6/sub_1"
  op: "Sub"
  input: "slice_tenosr_6/strided_slice_2"
  input: "slice_tenosr_6/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_6/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/floordiv_1"
  op: "FloorDiv"
  input: "slice_tenosr_6/sub_1"
  input: "slice_tenosr_6/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_4"
  op: "StridedSlice"
  input: "slice_tenosr_6/Shape_1"
  input: "slice_tenosr_6/strided_slice_4/stack"
  input: "slice_tenosr_6/strided_slice_4/stack_1"
  input: "slice_tenosr_6/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/strided_slice_5"
  op: "StridedSlice"
  input: "slice_tenosr_6/Shape_1"
  input: "slice_tenosr_6/strided_slice_5/stack"
  input: "slice_tenosr_6/strided_slice_5/stack_1"
  input: "slice_tenosr_6/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "slice_tenosr_6/Slice/begin/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_6/Slice/begin/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "slice_tenosr_6/Slice/begin"
  op: "Pack"
  input: "slice_tenosr_6/Slice/begin/0"
  input: "slice_tenosr_6/floordiv"
  input: "slice_tenosr_6/floordiv_1"
  input: "slice_tenosr_6/Slice/begin/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_6/Slice/size/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/Slice/size/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "slice_tenosr_6/Slice/size"
  op: "Pack"
  input: "slice_tenosr_6/Slice/size/0"
  input: "slice_tenosr_6/strided_slice_4"
  input: "slice_tenosr_6/strided_slice_5"
  input: "slice_tenosr_6/Slice/size/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "slice_tenosr_6/Slice"
  op: "Slice"
  input: "clIMask_input"
  input: "slice_tenosr_6/Slice/begin"
  input: "slice_tenosr_6/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_14"
  op: "Mul"
  input: "slice_tenosr_6/Slice"
  input: "slice_tenosr/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_15"
  op: "Mul"
  input: "SASMFGeoNet/output_c"
  input: "slice_tenosr_4/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 220
          }
        }
        string_val: "SASFieldNet/f_conv1/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv1/weights"
        string_val: "SASFieldNet/f_conv2/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv2/weights"
        string_val: "SASFieldNet/f_conv3/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv3/weights"
        string_val: "SASFieldNet/f_conv4/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv4/weights"
        string_val: "SASFieldNet/f_conv5/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv5/weights"
        string_val: "SASFieldNet/f_conv6/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv6/weights"
        string_val: "SASFieldNet/f_deconv3_1/biases"
        string_val: "SASFieldNet/f_deconv3_1/weights"
        string_val: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv3_2/weights"
        string_val: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv3_3/weights"
        string_val: "SASFieldNet/f_deconv4_1/biases"
        string_val: "SASFieldNet/f_deconv4_1/weights"
        string_val: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv4_2/weights"
        string_val: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv4_3/weights"
        string_val: "SASFieldNet/f_output/BatchNorm/beta"
        string_val: "SASFieldNet/f_output/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_output/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_output/weights"
        string_val: "SASMFGeoNet/c_geo_deconv1_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv1_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/weights"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/weights"
        string_val: "SASMFGeoNet/c_geo_deconv2_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv2_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/weights"
        string_val: "SASMFGeoNet/c_geo_deconv3_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv3_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/weights"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/weights"
        string_val: "SASMFGeoNet/c_geo_deconv4_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv4_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/weights"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/weights"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/weights"
        string_val: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_output/weights"
        string_val: "SASMFGeoNet/d_geo_deconv1_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv1_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/weights"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/weights"
        string_val: "SASMFGeoNet/d_geo_deconv2_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv2_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/weights"
        string_val: "SASMFGeoNet/d_geo_deconv3_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv3_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/weights"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/weights"
        string_val: "SASMFGeoNet/d_geo_deconv4_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv4_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/weights"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/weights"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/weights"
        string_val: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_output/weights"
        string_val: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv1/weights"
        string_val: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv10/weights"
        string_val: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv2/weights"
        string_val: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv3/weights"
        string_val: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv4/weights"
        string_val: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv6/weights"
        string_val: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv7/weights"
        string_val: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv8/weights"
        string_val: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv9/weights"
        string_val: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_onv5/weights"
        string_val: "SASMFGeoNet/n_geo_deconv1_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv1_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/weights"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/weights"
        string_val: "SASMFGeoNet/n_geo_deconv2_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv2_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/weights"
        string_val: "SASMFGeoNet/n_geo_deconv3_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv3_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/weights"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/weights"
        string_val: "SASMFGeoNet/n_geo_deconv4_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv4_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/weights"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/weights"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/weights"
        string_val: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 220
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "SASFieldNet/f_conv1/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv1/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv2/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv3/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv4/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv5/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_conv6/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/biases/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_1/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_2/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv3_3/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/biases/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_1/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_2/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_deconv4_3/weights/Read/ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASFieldNet/f_output/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/c_geo_output/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/d_geo_output/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv10/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv4/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv6/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv7/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv8/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_conv9/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/geo_onv5/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/Read/ReadVariableOp"
  input: "SASMFGeoNet/n_geo_output/weights/Read/ReadVariableOp"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 220
          }
        }
        string_val: "SASFieldNet/f_conv1/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv1/weights"
        string_val: "SASFieldNet/f_conv2/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv2/weights"
        string_val: "SASFieldNet/f_conv3/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv3/weights"
        string_val: "SASFieldNet/f_conv4/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv4/weights"
        string_val: "SASFieldNet/f_conv5/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv5/weights"
        string_val: "SASFieldNet/f_conv6/BatchNorm/beta"
        string_val: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_conv6/weights"
        string_val: "SASFieldNet/f_deconv3_1/biases"
        string_val: "SASFieldNet/f_deconv3_1/weights"
        string_val: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv3_2/weights"
        string_val: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv3_3/weights"
        string_val: "SASFieldNet/f_deconv4_1/biases"
        string_val: "SASFieldNet/f_deconv4_1/weights"
        string_val: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv4_2/weights"
        string_val: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
        string_val: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_deconv4_3/weights"
        string_val: "SASFieldNet/f_output/BatchNorm/beta"
        string_val: "SASFieldNet/f_output/BatchNorm/moving_mean"
        string_val: "SASFieldNet/f_output/BatchNorm/moving_variance"
        string_val: "SASFieldNet/f_output/weights"
        string_val: "SASMFGeoNet/c_geo_deconv1_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv1_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv1_2/weights"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv1_3/weights"
        string_val: "SASMFGeoNet/c_geo_deconv2_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv2_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv2_3/weights"
        string_val: "SASMFGeoNet/c_geo_deconv3_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv3_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv3_2/weights"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv3_3/weights"
        string_val: "SASMFGeoNet/c_geo_deconv4_1/biases"
        string_val: "SASMFGeoNet/c_geo_deconv4_1/weights"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv4_2/weights"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deconv4_3/weights"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_deonv2_2/weights"
        string_val: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
        string_val: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/c_geo_output/weights"
        string_val: "SASMFGeoNet/d_geo_deconv1_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv1_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv1_2/weights"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv1_3/weights"
        string_val: "SASMFGeoNet/d_geo_deconv2_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv2_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv2_3/weights"
        string_val: "SASMFGeoNet/d_geo_deconv3_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv3_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv3_2/weights"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv3_3/weights"
        string_val: "SASMFGeoNet/d_geo_deconv4_1/biases"
        string_val: "SASMFGeoNet/d_geo_deconv4_1/weights"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv4_2/weights"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deconv4_3/weights"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_deonv2_2/weights"
        string_val: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
        string_val: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/d_geo_output/weights"
        string_val: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv1/weights"
        string_val: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv10/weights"
        string_val: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv2/weights"
        string_val: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv3/weights"
        string_val: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv4/weights"
        string_val: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv6/weights"
        string_val: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv7/weights"
        string_val: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv8/weights"
        string_val: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_conv9/weights"
        string_val: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
        string_val: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/geo_onv5/weights"
        string_val: "SASMFGeoNet/n_geo_deconv1_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv1_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv1_2/weights"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv1_3/weights"
        string_val: "SASMFGeoNet/n_geo_deconv2_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv2_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv2_3/weights"
        string_val: "SASMFGeoNet/n_geo_deconv3_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv3_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv3_2/weights"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv3_3/weights"
        string_val: "SASMFGeoNet/n_geo_deconv4_1/biases"
        string_val: "SASMFGeoNet/n_geo_deconv4_1/weights"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv4_2/weights"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deconv4_3/weights"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_deonv2_2/weights"
        string_val: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
        string_val: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
        string_val: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
        string_val: "SASMFGeoNet/n_geo_output/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 220
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/beta"
  input: "save/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_mean"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/BatchNorm/moving_variance"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv1/weights"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/beta"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_mean"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/BatchNorm/moving_variance"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv2/weights"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/beta"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_mean"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/BatchNorm/moving_variance"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv3/weights"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/beta"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_mean"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/BatchNorm/moving_variance"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv4/weights"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/beta"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_mean"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/BatchNorm/moving_variance"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv5/weights"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/beta"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_mean"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/BatchNorm/moving_variance"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_conv6/weights"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_1/biases"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_1/weights"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/beta"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_mean"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/BatchNorm/moving_variance"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_2/weights"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/beta"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_mean"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/BatchNorm/moving_variance"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv3_3/weights"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_1/biases"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_1/weights"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/beta"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_mean"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/BatchNorm/moving_variance"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_2/weights"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/beta"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_mean"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/BatchNorm/moving_variance"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_deconv4_3/weights"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/beta"
  input: "save/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_mean"
  input: "save/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/BatchNorm/moving_variance"
  input: "save/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "SASFieldNet/f_output/weights"
  input: "save/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_48"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/biases"
  input: "save/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_49"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_1/weights"
  input: "save/Identity_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_50"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta"
  input: "save/Identity_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_51"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean"
  input: "save/Identity_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_52"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance"
  input: "save/Identity_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_53"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_2/weights"
  input: "save/Identity_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_54"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta"
  input: "save/Identity_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_55"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean"
  input: "save/Identity_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_56"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance"
  input: "save/Identity_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_57"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv1_3/weights"
  input: "save/Identity_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_58"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/biases"
  input: "save/Identity_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_59"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_1/weights"
  input: "save/Identity_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_60"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta"
  input: "save/Identity_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_61"
  op: "Identity"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_61"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean"
  input: "save/Identity_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_62"
  op: "Identity"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_62"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance"
  input: "save/Identity_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_63"
  op: "Identity"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_63"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv2_3/weights"
  input: "save/Identity_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_64"
  op: "Identity"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_64"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/biases"
  input: "save/Identity_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_65"
  op: "Identity"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_65"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_1/weights"
  input: "save/Identity_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_66"
  op: "Identity"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_66"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta"
  input: "save/Identity_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_67"
  op: "Identity"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_67"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean"
  input: "save/Identity_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_68"
  op: "Identity"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_68"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance"
  input: "save/Identity_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_69"
  op: "Identity"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_69"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_2/weights"
  input: "save/Identity_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_70"
  op: "Identity"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_70"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta"
  input: "save/Identity_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_71"
  op: "Identity"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_71"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean"
  input: "save/Identity_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_72"
  op: "Identity"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_72"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance"
  input: "save/Identity_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_73"
  op: "Identity"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_73"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv3_3/weights"
  input: "save/Identity_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_74"
  op: "Identity"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_74"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/biases"
  input: "save/Identity_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_75"
  op: "Identity"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_75"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_1/weights"
  input: "save/Identity_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_76"
  op: "Identity"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_76"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta"
  input: "save/Identity_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_77"
  op: "Identity"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_77"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean"
  input: "save/Identity_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_78"
  op: "Identity"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_78"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance"
  input: "save/Identity_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_79"
  op: "Identity"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_79"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_2/weights"
  input: "save/Identity_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_80"
  op: "Identity"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_80"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta"
  input: "save/Identity_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_81"
  op: "Identity"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_81"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean"
  input: "save/Identity_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_82"
  op: "Identity"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_82"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance"
  input: "save/Identity_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_83"
  op: "Identity"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_83"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deconv4_3/weights"
  input: "save/Identity_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_84"
  op: "Identity"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_84"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta"
  input: "save/Identity_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_85"
  op: "Identity"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_85"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean"
  input: "save/Identity_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_86"
  op: "Identity"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_86"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance"
  input: "save/Identity_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_87"
  op: "Identity"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_87"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_deonv2_2/weights"
  input: "save/Identity_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_88"
  op: "Identity"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_88"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/beta"
  input: "save/Identity_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_89"
  op: "Identity"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_89"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_mean"
  input: "save/Identity_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_90"
  op: "Identity"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_90"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/BatchNorm/moving_variance"
  input: "save/Identity_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_91"
  op: "Identity"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_91"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/c_geo_output/weights"
  input: "save/Identity_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_92"
  op: "Identity"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_92"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/biases"
  input: "save/Identity_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_93"
  op: "Identity"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_93"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_1/weights"
  input: "save/Identity_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_94"
  op: "Identity"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_94"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta"
  input: "save/Identity_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_95"
  op: "Identity"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_95"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean"
  input: "save/Identity_95"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_96"
  op: "Identity"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_96"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance"
  input: "save/Identity_96"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_97"
  op: "Identity"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_97"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_2/weights"
  input: "save/Identity_97"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_98"
  op: "Identity"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_98"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta"
  input: "save/Identity_98"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_99"
  op: "Identity"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_99"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean"
  input: "save/Identity_99"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_100"
  op: "Identity"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_100"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance"
  input: "save/Identity_100"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_101"
  op: "Identity"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_101"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv1_3/weights"
  input: "save/Identity_101"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_102"
  op: "Identity"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_102"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/biases"
  input: "save/Identity_102"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_103"
  op: "Identity"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_103"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_1/weights"
  input: "save/Identity_103"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_104"
  op: "Identity"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_104"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta"
  input: "save/Identity_104"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_105"
  op: "Identity"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_105"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean"
  input: "save/Identity_105"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_106"
  op: "Identity"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_106"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance"
  input: "save/Identity_106"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_107"
  op: "Identity"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_107"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv2_3/weights"
  input: "save/Identity_107"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_108"
  op: "Identity"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_108"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/biases"
  input: "save/Identity_108"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_109"
  op: "Identity"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_109"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_1/weights"
  input: "save/Identity_109"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_110"
  op: "Identity"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_110"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta"
  input: "save/Identity_110"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_111"
  op: "Identity"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_111"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean"
  input: "save/Identity_111"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_112"
  op: "Identity"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_112"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance"
  input: "save/Identity_112"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_113"
  op: "Identity"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_113"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_2/weights"
  input: "save/Identity_113"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_114"
  op: "Identity"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_114"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta"
  input: "save/Identity_114"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_115"
  op: "Identity"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_115"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean"
  input: "save/Identity_115"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_116"
  op: "Identity"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_116"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance"
  input: "save/Identity_116"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_117"
  op: "Identity"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_117"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv3_3/weights"
  input: "save/Identity_117"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_118"
  op: "Identity"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_118"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/biases"
  input: "save/Identity_118"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_119"
  op: "Identity"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_119"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_1/weights"
  input: "save/Identity_119"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_120"
  op: "Identity"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_120"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta"
  input: "save/Identity_120"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_121"
  op: "Identity"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_121"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean"
  input: "save/Identity_121"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_122"
  op: "Identity"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_122"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance"
  input: "save/Identity_122"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_123"
  op: "Identity"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_123"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_2/weights"
  input: "save/Identity_123"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_124"
  op: "Identity"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_124"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta"
  input: "save/Identity_124"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_125"
  op: "Identity"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_125"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean"
  input: "save/Identity_125"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_126"
  op: "Identity"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_126"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance"
  input: "save/Identity_126"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_127"
  op: "Identity"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_127"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deconv4_3/weights"
  input: "save/Identity_127"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_128"
  op: "Identity"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_128"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta"
  input: "save/Identity_128"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_129"
  op: "Identity"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_129"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean"
  input: "save/Identity_129"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_130"
  op: "Identity"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_130"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance"
  input: "save/Identity_130"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_131"
  op: "Identity"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_131"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_deonv2_2/weights"
  input: "save/Identity_131"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_132"
  op: "Identity"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_132"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/beta"
  input: "save/Identity_132"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_133"
  op: "Identity"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_133"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_mean"
  input: "save/Identity_133"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_134"
  op: "Identity"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_134"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/BatchNorm/moving_variance"
  input: "save/Identity_134"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_135"
  op: "Identity"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_135"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/d_geo_output/weights"
  input: "save/Identity_135"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_136"
  op: "Identity"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_136"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/beta"
  input: "save/Identity_136"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_137"
  op: "Identity"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_137"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_mean"
  input: "save/Identity_137"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_138"
  op: "Identity"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_138"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/BatchNorm/moving_variance"
  input: "save/Identity_138"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_139"
  op: "Identity"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_139"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv1/weights"
  input: "save/Identity_139"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_140"
  op: "Identity"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_140"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/beta"
  input: "save/Identity_140"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_141"
  op: "Identity"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_141"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_mean"
  input: "save/Identity_141"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_142"
  op: "Identity"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_142"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/BatchNorm/moving_variance"
  input: "save/Identity_142"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_143"
  op: "Identity"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_143"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv10/weights"
  input: "save/Identity_143"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_144"
  op: "Identity"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_144"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/beta"
  input: "save/Identity_144"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_145"
  op: "Identity"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_145"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_mean"
  input: "save/Identity_145"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_146"
  op: "Identity"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_146"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/BatchNorm/moving_variance"
  input: "save/Identity_146"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_147"
  op: "Identity"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_147"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv2/weights"
  input: "save/Identity_147"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_148"
  op: "Identity"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_148"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/beta"
  input: "save/Identity_148"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_149"
  op: "Identity"
  input: "save/RestoreV2:149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_149"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_mean"
  input: "save/Identity_149"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_150"
  op: "Identity"
  input: "save/RestoreV2:150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_150"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/BatchNorm/moving_variance"
  input: "save/Identity_150"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_151"
  op: "Identity"
  input: "save/RestoreV2:151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_151"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv3/weights"
  input: "save/Identity_151"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_152"
  op: "Identity"
  input: "save/RestoreV2:152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_152"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/beta"
  input: "save/Identity_152"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_153"
  op: "Identity"
  input: "save/RestoreV2:153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_153"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_mean"
  input: "save/Identity_153"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_154"
  op: "Identity"
  input: "save/RestoreV2:154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_154"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/BatchNorm/moving_variance"
  input: "save/Identity_154"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_155"
  op: "Identity"
  input: "save/RestoreV2:155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_155"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv4/weights"
  input: "save/Identity_155"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_156"
  op: "Identity"
  input: "save/RestoreV2:156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_156"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/beta"
  input: "save/Identity_156"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_157"
  op: "Identity"
  input: "save/RestoreV2:157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_157"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_mean"
  input: "save/Identity_157"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_158"
  op: "Identity"
  input: "save/RestoreV2:158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_158"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/BatchNorm/moving_variance"
  input: "save/Identity_158"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_159"
  op: "Identity"
  input: "save/RestoreV2:159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_159"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv6/weights"
  input: "save/Identity_159"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_160"
  op: "Identity"
  input: "save/RestoreV2:160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_160"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/beta"
  input: "save/Identity_160"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_161"
  op: "Identity"
  input: "save/RestoreV2:161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_161"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_mean"
  input: "save/Identity_161"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_162"
  op: "Identity"
  input: "save/RestoreV2:162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_162"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/BatchNorm/moving_variance"
  input: "save/Identity_162"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_163"
  op: "Identity"
  input: "save/RestoreV2:163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_163"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv7/weights"
  input: "save/Identity_163"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_164"
  op: "Identity"
  input: "save/RestoreV2:164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_164"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/beta"
  input: "save/Identity_164"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_165"
  op: "Identity"
  input: "save/RestoreV2:165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_165"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_mean"
  input: "save/Identity_165"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_166"
  op: "Identity"
  input: "save/RestoreV2:166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_166"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/BatchNorm/moving_variance"
  input: "save/Identity_166"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_167"
  op: "Identity"
  input: "save/RestoreV2:167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_167"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv8/weights"
  input: "save/Identity_167"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_168"
  op: "Identity"
  input: "save/RestoreV2:168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_168"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/beta"
  input: "save/Identity_168"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_169"
  op: "Identity"
  input: "save/RestoreV2:169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_169"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_mean"
  input: "save/Identity_169"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_170"
  op: "Identity"
  input: "save/RestoreV2:170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_170"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/BatchNorm/moving_variance"
  input: "save/Identity_170"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_171"
  op: "Identity"
  input: "save/RestoreV2:171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_171"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_conv9/weights"
  input: "save/Identity_171"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_172"
  op: "Identity"
  input: "save/RestoreV2:172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_172"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/beta"
  input: "save/Identity_172"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_173"
  op: "Identity"
  input: "save/RestoreV2:173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_173"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_mean"
  input: "save/Identity_173"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_174"
  op: "Identity"
  input: "save/RestoreV2:174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_174"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/BatchNorm/moving_variance"
  input: "save/Identity_174"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_175"
  op: "Identity"
  input: "save/RestoreV2:175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_175"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/geo_onv5/weights"
  input: "save/Identity_175"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_176"
  op: "Identity"
  input: "save/RestoreV2:176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_176"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/biases"
  input: "save/Identity_176"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_177"
  op: "Identity"
  input: "save/RestoreV2:177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_177"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_1/weights"
  input: "save/Identity_177"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_178"
  op: "Identity"
  input: "save/RestoreV2:178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_178"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta"
  input: "save/Identity_178"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_179"
  op: "Identity"
  input: "save/RestoreV2:179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_179"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean"
  input: "save/Identity_179"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_180"
  op: "Identity"
  input: "save/RestoreV2:180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_180"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance"
  input: "save/Identity_180"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_181"
  op: "Identity"
  input: "save/RestoreV2:181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_181"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_2/weights"
  input: "save/Identity_181"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_182"
  op: "Identity"
  input: "save/RestoreV2:182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_182"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta"
  input: "save/Identity_182"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_183"
  op: "Identity"
  input: "save/RestoreV2:183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_183"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean"
  input: "save/Identity_183"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_184"
  op: "Identity"
  input: "save/RestoreV2:184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_184"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance"
  input: "save/Identity_184"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_185"
  op: "Identity"
  input: "save/RestoreV2:185"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_185"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv1_3/weights"
  input: "save/Identity_185"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_186"
  op: "Identity"
  input: "save/RestoreV2:186"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_186"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/biases"
  input: "save/Identity_186"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_187"
  op: "Identity"
  input: "save/RestoreV2:187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_187"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_1/weights"
  input: "save/Identity_187"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_188"
  op: "Identity"
  input: "save/RestoreV2:188"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_188"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta"
  input: "save/Identity_188"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_189"
  op: "Identity"
  input: "save/RestoreV2:189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_189"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean"
  input: "save/Identity_189"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_190"
  op: "Identity"
  input: "save/RestoreV2:190"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_190"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance"
  input: "save/Identity_190"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_191"
  op: "Identity"
  input: "save/RestoreV2:191"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_191"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv2_3/weights"
  input: "save/Identity_191"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_192"
  op: "Identity"
  input: "save/RestoreV2:192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_192"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/biases"
  input: "save/Identity_192"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_193"
  op: "Identity"
  input: "save/RestoreV2:193"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_193"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_1/weights"
  input: "save/Identity_193"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_194"
  op: "Identity"
  input: "save/RestoreV2:194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_194"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta"
  input: "save/Identity_194"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_195"
  op: "Identity"
  input: "save/RestoreV2:195"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_195"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean"
  input: "save/Identity_195"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_196"
  op: "Identity"
  input: "save/RestoreV2:196"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_196"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance"
  input: "save/Identity_196"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_197"
  op: "Identity"
  input: "save/RestoreV2:197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_197"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_2/weights"
  input: "save/Identity_197"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_198"
  op: "Identity"
  input: "save/RestoreV2:198"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_198"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta"
  input: "save/Identity_198"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_199"
  op: "Identity"
  input: "save/RestoreV2:199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_199"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean"
  input: "save/Identity_199"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_200"
  op: "Identity"
  input: "save/RestoreV2:200"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_200"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance"
  input: "save/Identity_200"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_201"
  op: "Identity"
  input: "save/RestoreV2:201"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_201"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv3_3/weights"
  input: "save/Identity_201"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_202"
  op: "Identity"
  input: "save/RestoreV2:202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_202"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/biases"
  input: "save/Identity_202"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_203"
  op: "Identity"
  input: "save/RestoreV2:203"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_203"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_1/weights"
  input: "save/Identity_203"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_204"
  op: "Identity"
  input: "save/RestoreV2:204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_204"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta"
  input: "save/Identity_204"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_205"
  op: "Identity"
  input: "save/RestoreV2:205"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_205"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean"
  input: "save/Identity_205"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_206"
  op: "Identity"
  input: "save/RestoreV2:206"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_206"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance"
  input: "save/Identity_206"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_207"
  op: "Identity"
  input: "save/RestoreV2:207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_207"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_2/weights"
  input: "save/Identity_207"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_208"
  op: "Identity"
  input: "save/RestoreV2:208"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_208"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta"
  input: "save/Identity_208"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_209"
  op: "Identity"
  input: "save/RestoreV2:209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_209"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean"
  input: "save/Identity_209"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_210"
  op: "Identity"
  input: "save/RestoreV2:210"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_210"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance"
  input: "save/Identity_210"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_211"
  op: "Identity"
  input: "save/RestoreV2:211"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_211"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deconv4_3/weights"
  input: "save/Identity_211"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_212"
  op: "Identity"
  input: "save/RestoreV2:212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_212"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta"
  input: "save/Identity_212"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_213"
  op: "Identity"
  input: "save/RestoreV2:213"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_213"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean"
  input: "save/Identity_213"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_214"
  op: "Identity"
  input: "save/RestoreV2:214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_214"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance"
  input: "save/Identity_214"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_215"
  op: "Identity"
  input: "save/RestoreV2:215"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_215"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_deonv2_2/weights"
  input: "save/Identity_215"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_216"
  op: "Identity"
  input: "save/RestoreV2:216"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_216"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/beta"
  input: "save/Identity_216"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_217"
  op: "Identity"
  input: "save/RestoreV2:217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_217"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_mean"
  input: "save/Identity_217"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_218"
  op: "Identity"
  input: "save/RestoreV2:218"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_218"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/BatchNorm/moving_variance"
  input: "save/Identity_218"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_219"
  op: "Identity"
  input: "save/RestoreV2:219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/AssignVariableOp_219"
  op: "AssignVariableOp"
  input: "SASMFGeoNet/n_geo_output/weights"
  input: "save/Identity_219"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_100"
  input: "^save/AssignVariableOp_101"
  input: "^save/AssignVariableOp_102"
  input: "^save/AssignVariableOp_103"
  input: "^save/AssignVariableOp_104"
  input: "^save/AssignVariableOp_105"
  input: "^save/AssignVariableOp_106"
  input: "^save/AssignVariableOp_107"
  input: "^save/AssignVariableOp_108"
  input: "^save/AssignVariableOp_109"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_110"
  input: "^save/AssignVariableOp_111"
  input: "^save/AssignVariableOp_112"
  input: "^save/AssignVariableOp_113"
  input: "^save/AssignVariableOp_114"
  input: "^save/AssignVariableOp_115"
  input: "^save/AssignVariableOp_116"
  input: "^save/AssignVariableOp_117"
  input: "^save/AssignVariableOp_118"
  input: "^save/AssignVariableOp_119"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_120"
  input: "^save/AssignVariableOp_121"
  input: "^save/AssignVariableOp_122"
  input: "^save/AssignVariableOp_123"
  input: "^save/AssignVariableOp_124"
  input: "^save/AssignVariableOp_125"
  input: "^save/AssignVariableOp_126"
  input: "^save/AssignVariableOp_127"
  input: "^save/AssignVariableOp_128"
  input: "^save/AssignVariableOp_129"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_130"
  input: "^save/AssignVariableOp_131"
  input: "^save/AssignVariableOp_132"
  input: "^save/AssignVariableOp_133"
  input: "^save/AssignVariableOp_134"
  input: "^save/AssignVariableOp_135"
  input: "^save/AssignVariableOp_136"
  input: "^save/AssignVariableOp_137"
  input: "^save/AssignVariableOp_138"
  input: "^save/AssignVariableOp_139"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_140"
  input: "^save/AssignVariableOp_141"
  input: "^save/AssignVariableOp_142"
  input: "^save/AssignVariableOp_143"
  input: "^save/AssignVariableOp_144"
  input: "^save/AssignVariableOp_145"
  input: "^save/AssignVariableOp_146"
  input: "^save/AssignVariableOp_147"
  input: "^save/AssignVariableOp_148"
  input: "^save/AssignVariableOp_149"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_150"
  input: "^save/AssignVariableOp_151"
  input: "^save/AssignVariableOp_152"
  input: "^save/AssignVariableOp_153"
  input: "^save/AssignVariableOp_154"
  input: "^save/AssignVariableOp_155"
  input: "^save/AssignVariableOp_156"
  input: "^save/AssignVariableOp_157"
  input: "^save/AssignVariableOp_158"
  input: "^save/AssignVariableOp_159"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_160"
  input: "^save/AssignVariableOp_161"
  input: "^save/AssignVariableOp_162"
  input: "^save/AssignVariableOp_163"
  input: "^save/AssignVariableOp_164"
  input: "^save/AssignVariableOp_165"
  input: "^save/AssignVariableOp_166"
  input: "^save/AssignVariableOp_167"
  input: "^save/AssignVariableOp_168"
  input: "^save/AssignVariableOp_169"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_170"
  input: "^save/AssignVariableOp_171"
  input: "^save/AssignVariableOp_172"
  input: "^save/AssignVariableOp_173"
  input: "^save/AssignVariableOp_174"
  input: "^save/AssignVariableOp_175"
  input: "^save/AssignVariableOp_176"
  input: "^save/AssignVariableOp_177"
  input: "^save/AssignVariableOp_178"
  input: "^save/AssignVariableOp_179"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_180"
  input: "^save/AssignVariableOp_181"
  input: "^save/AssignVariableOp_182"
  input: "^save/AssignVariableOp_183"
  input: "^save/AssignVariableOp_184"
  input: "^save/AssignVariableOp_185"
  input: "^save/AssignVariableOp_186"
  input: "^save/AssignVariableOp_187"
  input: "^save/AssignVariableOp_188"
  input: "^save/AssignVariableOp_189"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_190"
  input: "^save/AssignVariableOp_191"
  input: "^save/AssignVariableOp_192"
  input: "^save/AssignVariableOp_193"
  input: "^save/AssignVariableOp_194"
  input: "^save/AssignVariableOp_195"
  input: "^save/AssignVariableOp_196"
  input: "^save/AssignVariableOp_197"
  input: "^save/AssignVariableOp_198"
  input: "^save/AssignVariableOp_199"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_200"
  input: "^save/AssignVariableOp_201"
  input: "^save/AssignVariableOp_202"
  input: "^save/AssignVariableOp_203"
  input: "^save/AssignVariableOp_204"
  input: "^save/AssignVariableOp_205"
  input: "^save/AssignVariableOp_206"
  input: "^save/AssignVariableOp_207"
  input: "^save/AssignVariableOp_208"
  input: "^save/AssignVariableOp_209"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_210"
  input: "^save/AssignVariableOp_211"
  input: "^save/AssignVariableOp_212"
  input: "^save/AssignVariableOp_213"
  input: "^save/AssignVariableOp_214"
  input: "^save/AssignVariableOp_215"
  input: "^save/AssignVariableOp_216"
  input: "^save/AssignVariableOp_217"
  input: "^save/AssignVariableOp_218"
  input: "^save/AssignVariableOp_219"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_43"
  input: "^save/AssignVariableOp_44"
  input: "^save/AssignVariableOp_45"
  input: "^save/AssignVariableOp_46"
  input: "^save/AssignVariableOp_47"
  input: "^save/AssignVariableOp_48"
  input: "^save/AssignVariableOp_49"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_50"
  input: "^save/AssignVariableOp_51"
  input: "^save/AssignVariableOp_52"
  input: "^save/AssignVariableOp_53"
  input: "^save/AssignVariableOp_54"
  input: "^save/AssignVariableOp_55"
  input: "^save/AssignVariableOp_56"
  input: "^save/AssignVariableOp_57"
  input: "^save/AssignVariableOp_58"
  input: "^save/AssignVariableOp_59"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_60"
  input: "^save/AssignVariableOp_61"
  input: "^save/AssignVariableOp_62"
  input: "^save/AssignVariableOp_63"
  input: "^save/AssignVariableOp_64"
  input: "^save/AssignVariableOp_65"
  input: "^save/AssignVariableOp_66"
  input: "^save/AssignVariableOp_67"
  input: "^save/AssignVariableOp_68"
  input: "^save/AssignVariableOp_69"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_70"
  input: "^save/AssignVariableOp_71"
  input: "^save/AssignVariableOp_72"
  input: "^save/AssignVariableOp_73"
  input: "^save/AssignVariableOp_74"
  input: "^save/AssignVariableOp_75"
  input: "^save/AssignVariableOp_76"
  input: "^save/AssignVariableOp_77"
  input: "^save/AssignVariableOp_78"
  input: "^save/AssignVariableOp_79"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_80"
  input: "^save/AssignVariableOp_81"
  input: "^save/AssignVariableOp_82"
  input: "^save/AssignVariableOp_83"
  input: "^save/AssignVariableOp_84"
  input: "^save/AssignVariableOp_85"
  input: "^save/AssignVariableOp_86"
  input: "^save/AssignVariableOp_87"
  input: "^save/AssignVariableOp_88"
  input: "^save/AssignVariableOp_89"
  input: "^save/AssignVariableOp_9"
  input: "^save/AssignVariableOp_90"
  input: "^save/AssignVariableOp_91"
  input: "^save/AssignVariableOp_92"
  input: "^save/AssignVariableOp_93"
  input: "^save/AssignVariableOp_94"
  input: "^save/AssignVariableOp_95"
  input: "^save/AssignVariableOp_96"
  input: "^save/AssignVariableOp_97"
  input: "^save/AssignVariableOp_98"
  input: "^save/AssignVariableOp_99"
}
node {
  name: "init"
  op: "NoOp"
  input: "^SASFieldNet/f_conv1/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_conv1/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_conv1/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_conv1/weights/Assign"
  input: "^SASFieldNet/f_conv2/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_conv2/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_conv2/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_conv2/weights/Assign"
  input: "^SASFieldNet/f_conv3/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_conv3/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_conv3/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_conv3/weights/Assign"
  input: "^SASFieldNet/f_conv4/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_conv4/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_conv4/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_conv4/weights/Assign"
  input: "^SASFieldNet/f_conv5/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_conv5/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_conv5/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_conv5/weights/Assign"
  input: "^SASFieldNet/f_conv6/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_conv6/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_conv6/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_conv6/weights/Assign"
  input: "^SASFieldNet/f_deconv3_1/biases/Assign"
  input: "^SASFieldNet/f_deconv3_1/weights/Assign"
  input: "^SASFieldNet/f_deconv3_2/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_deconv3_2/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_deconv3_2/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_deconv3_2/weights/Assign"
  input: "^SASFieldNet/f_deconv3_3/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_deconv3_3/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_deconv3_3/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_deconv3_3/weights/Assign"
  input: "^SASFieldNet/f_deconv4_1/biases/Assign"
  input: "^SASFieldNet/f_deconv4_1/weights/Assign"
  input: "^SASFieldNet/f_deconv4_2/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_deconv4_2/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_deconv4_2/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_deconv4_2/weights/Assign"
  input: "^SASFieldNet/f_deconv4_3/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_deconv4_3/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_deconv4_3/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_deconv4_3/weights/Assign"
  input: "^SASFieldNet/f_output/BatchNorm/beta/Assign"
  input: "^SASFieldNet/f_output/BatchNorm/moving_mean/Assign"
  input: "^SASFieldNet/f_output/BatchNorm/moving_variance/Assign"
  input: "^SASFieldNet/f_output/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_1/biases/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_1/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_2/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv1_3/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv2_1/biases/Assign"
  input: "^SASMFGeoNet/c_geo_deconv2_1/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv2_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv2_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv2_3/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_1/biases/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_1/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_2/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv3_3/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_1/biases/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_1/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_2/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deconv4_3/weights/Assign"
  input: "^SASMFGeoNet/c_geo_deonv2_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_deonv2_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_deonv2_2/weights/Assign"
  input: "^SASMFGeoNet/c_geo_output/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/c_geo_output/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/c_geo_output/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/c_geo_output/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_1/biases/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_1/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_2/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv1_3/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv2_1/biases/Assign"
  input: "^SASMFGeoNet/d_geo_deconv2_1/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv2_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv2_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv2_3/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_1/biases/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_1/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_2/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv3_3/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_1/biases/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_1/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_2/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deconv4_3/weights/Assign"
  input: "^SASMFGeoNet/d_geo_deonv2_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_deonv2_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_deonv2_2/weights/Assign"
  input: "^SASMFGeoNet/d_geo_output/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/d_geo_output/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/d_geo_output/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/d_geo_output/weights/Assign"
  input: "^SASMFGeoNet/geo_conv1/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv1/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv1/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv1/weights/Assign"
  input: "^SASMFGeoNet/geo_conv10/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv10/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv10/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv10/weights/Assign"
  input: "^SASMFGeoNet/geo_conv2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv2/weights/Assign"
  input: "^SASMFGeoNet/geo_conv3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv3/weights/Assign"
  input: "^SASMFGeoNet/geo_conv4/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv4/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv4/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv4/weights/Assign"
  input: "^SASMFGeoNet/geo_conv6/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv6/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv6/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv6/weights/Assign"
  input: "^SASMFGeoNet/geo_conv7/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv7/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv7/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv7/weights/Assign"
  input: "^SASMFGeoNet/geo_conv8/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv8/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv8/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv8/weights/Assign"
  input: "^SASMFGeoNet/geo_conv9/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_conv9/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_conv9/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_conv9/weights/Assign"
  input: "^SASMFGeoNet/geo_onv5/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/geo_onv5/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/geo_onv5/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/geo_onv5/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_1/biases/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_1/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_2/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv1_3/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv2_1/biases/Assign"
  input: "^SASMFGeoNet/n_geo_deconv2_1/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv2_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv2_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv2_3/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_1/biases/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_1/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_2/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv3_3/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_1/biases/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_1/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_2/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_3/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_3/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deconv4_3/weights/Assign"
  input: "^SASMFGeoNet/n_geo_deonv2_2/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_deonv2_2/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_deonv2_2/weights/Assign"
  input: "^SASMFGeoNet/n_geo_output/BatchNorm/beta/Assign"
  input: "^SASMFGeoNet/n_geo_output/BatchNorm/moving_mean/Assign"
  input: "^SASMFGeoNet/n_geo_output/BatchNorm/moving_variance/Assign"
  input: "^SASMFGeoNet/n_geo_output/weights/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
library {
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3824"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_assert_broadcastable_is_valid_shape_true_3148"
      input_arg {
        name: "mean_squared_error_1_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_1_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_1_assert_broadcastable_is_scalar"
      value: "mean_squared_error_1_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3736"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_assert_broadcastable_is_valid_shape_false_3510"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_2_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_2_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_2_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_2_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3518"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3517"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_assert_broadcastable_AssertGuard_false_3778"
      input_arg {
        name: "assert_mean_squared_error_3_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_3_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_3_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_3_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "slice_tenosr_3/Slice:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_3/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_3_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_3_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_3_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_3_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_3_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_assert_broadcastable_AssertGuard_true_4199"
      input_arg {
        name: "identity_reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_4480"
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/mean_squared_error_1/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/mean_squared_error_1/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3816"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3824"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3823"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3647"
      input_arg {
        name: "identity_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3244"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3598"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3606"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3605"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3866"
      input_arg {
        name: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_3/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_3/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_4245"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\003\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_true_4149"
      input_arg {
        name: "reg_loss_mean_squared_error_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "reg_loss_mean_squared_error_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "reg_loss_mean_squared_error_assert_broadcastable_is_scalar"
      value: "reg_loss_mean_squared_error_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_assert_broadcastable_AssertGuard_false_3560"
      input_arg {
        name: "assert_mean_squared_error_2_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_2_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_2_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_2_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "slice_tenosr/Slice:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_2/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_2_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_2_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_2_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_2_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_2_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3606"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_4287"
      input_arg {
        name: "identity_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3597"
      input_arg {
        name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3067"
      input_arg {
        name: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "absolute_difference/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "absolute_difference/Abs:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_assert_broadcastable_is_valid_shape_false_3149"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_1_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_1_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3157"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3156"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_assert_broadcastable_is_valid_shape_true_3509"
      input_arg {
        name: "mean_squared_error_2_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_2_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_2_assert_broadcastable_is_scalar"
      value: "mean_squared_error_2_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_assert_broadcastable_AssertGuard_true_4391"
      input_arg {
        name: "identity_reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_2836"
      input_arg {
        name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3066"
      input_arg {
        name: "identity_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3466"
      input_arg {
        name: "identity_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3157"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3337"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_2756"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3016"
      input_arg {
        name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3025"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_2936"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3286"
      input_arg {
        name: "identity_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3416"
      input_arg {
        name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_assert_broadcastable_AssertGuard_false_3379"
      input_arg {
        name: "assert_absolute_difference_1_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_absolute_difference_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_1_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "slice_tenosr/Slice:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "absolute_difference_1/Abs:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_absolute_difference_1_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_absolute_difference_1_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_absolute_difference_1_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_absolute_difference_1_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_absolute_difference_1_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_true_4341"
      input_arg {
        name: "reg_loss_mean_squared_error_1_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "reg_loss_mean_squared_error_1_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "reg_loss_mean_squared_error_1_assert_broadcastable_is_scalar"
      value: "reg_loss_mean_squared_error_1_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_false_4342"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_4350"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_4349"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_assert_broadcastable_AssertGuard_false_4200"
      input_arg {
        name: "assert_reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/Squeeze:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/mean_squared_error/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_reg_loss_mean_squared_error_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_reg_loss_mean_squared_error_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_reg_loss_mean_squared_error_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_assert_broadcastable_is_valid_shape_false_3329"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_absolute_difference_1_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_absolute_difference_1_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3337"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3336"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3237"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3245"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3244"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3017"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3025"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3024"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_assert_broadcastable_AssertGuard_false_3199"
      input_arg {
        name: "assert_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_1_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "slice_tenosr/Slice:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_1/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_1_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_1_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_1_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_4430"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_4438"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_4437"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_4246"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_4349"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_1_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\003\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_1_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3245"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_assert_broadcastable_AssertGuard_true_2978"
      input_arg {
        name: "identity_absolute_difference_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_absolute_difference_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3287"
      input_arg {
        name: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_1/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_1/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_assert_broadcastable_AssertGuard_true_2798"
      input_arg {
        name: "identity_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_assert_broadcastable_AssertGuard_false_2979"
      input_arg {
        name: "assert_absolute_difference_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_absolute_difference_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Tile:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "absolute_difference/Abs:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_absolute_difference_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_absolute_difference_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_absolute_difference_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_absolute_difference_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_absolute_difference_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3467"
      input_arg {
        name: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "absolute_difference_1/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "absolute_difference_1/Abs:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3517"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_2_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_2_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_2_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_2_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_2886"
      input_arg {
        name: "identity_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_4238"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_4246"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_4245"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_4288"
      input_arg {
        name: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/mean_squared_error/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/mean_squared_error/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_2757"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_assert_broadcastable_AssertGuard_true_3559"
      input_arg {
        name: "identity_mean_squared_error_2_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_2_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_assert_broadcastable_AssertGuard_true_3198"
      input_arg {
        name: "identity_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3424"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_assert_broadcastable_AssertGuard_true_3777"
      input_arg {
        name: "identity_mean_squared_error_3_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_3_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_assert_broadcastable_AssertGuard_false_4392"
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/Squeeze_1:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "reg_loss/mean_squared_error_1/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_reg_loss_mean_squared_error_1_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3425"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_assert_broadcastable_is_valid_shape_false_2749"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_2757"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_2756"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_3518"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3605"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_4157"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\003\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_2937"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_assert_broadcastable_is_valid_shape_true_3328"
      input_arg {
        name: "absolute_difference_1_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "absolute_difference_1_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "absolute_difference_1_assert_broadcastable_is_scalar"
      value: "absolute_difference_1_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_3417"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_absolute_difference_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3425"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3424"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3236"
      input_arg {
        name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_false_2837"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_2845"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_2844"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_assert_broadcastable_is_valid_shape_true_2928"
      input_arg {
        name: "absolute_difference_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "absolute_difference_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "absolute_difference_assert_broadcastable_is_scalar"
      value: "absolute_difference_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_assert_broadcastable_is_valid_shape_true_3727"
      input_arg {
        name: "mean_squared_error_3_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_3_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_3_assert_broadcastable_is_scalar"
      value: "mean_squared_error_3_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_2844"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_assert_broadcastable_is_valid_shape_false_3728"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_3_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_mean_squared_error_3_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_mean_squared_error_3_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_mean_squared_error_3_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_mean_squared_error_3_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_3736"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_3735"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_3648"
      input_arg {
        name: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_2/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error_2/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_2_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_4429"
      input_arg {
        name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_2845"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_assert_broadcastable_is_valid_shape_true_2748"
      input_arg {
        name: "mean_squared_error_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_assert_broadcastable_is_scalar"
      value: "mean_squared_error_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3156"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_1_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_1_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_assert_broadcastable_is_valid_shape_false_4150"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_reg_loss_mean_squared_error_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_reg_loss_mean_squared_error_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_4158"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_4157"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_4237"
      input_arg {
        name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "reg_loss_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_4437"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\003\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3024"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_1_assert_broadcastable_AssertGuard_true_3378"
      input_arg {
        name: "identity_absolute_difference_1_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_absolute_difference_1_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_4479"
      input_arg {
        name: "identity_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_reg_loss_mean_squared_error_1_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3823"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_4350"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_AssertGuard_true_3865"
      input_arg {
        name: "identity_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_4158"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_false_4438"
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
        type: DT_BOOL
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank"
      value: "has_valid_nonscalar_shape_has_valid_nonscalar_shape_is_same_rank_0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 3
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_assert_broadcastable_AssertGuard_false_2799"
      input_arg {
        name: "assert_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Tile:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3336"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_1_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_1_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_absolute_difference_1_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_absolute_difference_1_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "absolute_difference_assert_broadcastable_is_valid_shape_false_2929"
      input_arg {
        name: "placeholder"
        type: DT_BOOL
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_assert_broadcastable_values_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_assert_broadcastable_weights_rank"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_absolute_difference_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      output_arg {
        name: "has_valid_nonscalar_shape_identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/is_same_rank"
      op: "Equal"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_assert_broadcastable_values_rank"
      input: "has_valid_nonscalar_shape_is_same_rank_absolute_difference_assert_broadcastable_weights_rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/is_same_rank"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape"
      op: "StatelessIf"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      input: "has_valid_nonscalar_shape_absolute_difference_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape_absolute_difference_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/is_same_rank:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_false_2937"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "has_valid_nonscalar_shape_true_2936"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/Identity"
      op: "Identity"
      input: "has_valid_nonscalar_shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/Identity"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_identity"
      value: "has_valid_nonscalar_shape/Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_num_present_broadcast_weights_assert_broadcastable_AssertGuard_false_2887"
      input_arg {
        name: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights can not be broadcast to values."
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "weights.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error/num_present/Select:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "values.shape="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert/data_5"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "mean_squared_error/SquaredDifference:0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_5"
      }
    }
    node_def {
      name: "Assert/data_7"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "is_scalar="
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_7"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_weights_shape"
      input: "Assert/data_4:output:0"
      input: "Assert/data_5:output:0"
      input: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_values_shape"
      input: "Assert/data_7:output:0"
      input: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_STRING
            type: DT_INT32
            type: DT_STRING
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_mean_squared_error_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_identity"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_valid_shape_true_3815"
      input_arg {
        name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_2"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      output_arg {
        name: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_scalar"
        type: DT_BOOL
      }
    }
    ret {
      key: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_scalar"
      value: "mean_squared_error_3_num_present_broadcast_weights_assert_broadcastable_is_scalar_0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "has_valid_nonscalar_shape_true_3735"
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_3_assert_broadcastable_values_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_3_assert_broadcastable_weights_shape"
        type: DT_INT32
      }
      input_arg {
        name: "has_valid_nonscalar_shape_placeholder"
        type: DT_BOOL
      }
      output_arg {
        name: "has_valid_nonscalar_shape_has_invalid_dims"
        type: DT_BOOL
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_mean_squared_error_3_assert_broadcastable_values_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\004\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      op: "Fill"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Shape:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ones_like"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      op: "ConcatV2"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ones_like:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/concat"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      op: "ExpandDims"
      input: "has_valid_nonscalar_shape_has_invalid_dims_expanddims_1_mean_squared_error_3_assert_broadcastable_weights_shape"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      op: "DenseToDenseSetOperation"
      input: "has_valid_nonscalar_shape/has_invalid_dims/ExpandDims_1:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/concat:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "set_operation"
        value {
          s: "a-b"
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      op: "Size"
      input: "has_valid_nonscalar_shape/has_invalid_dims/DenseToDenseSetOperation:result_values:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims/x"
      }
    }
    node_def {
      name: "has_valid_nonscalar_shape/has_invalid_dims"
      op: "Equal"
      input: "has_valid_nonscalar_shape/has_invalid_dims/x:output:0"
      input: "has_valid_nonscalar_shape/has_invalid_dims/num_invalid_dims:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "has_valid_nonscalar_shape/has_invalid_dims"
      }
    }
    ret {
      key: "has_valid_nonscalar_shape_has_invalid_dims"
      value: "has_valid_nonscalar_shape/has_invalid_dims:z:0"
    }
    attr {
      key: "_construction_context"
      value {
        s: "kEagerRuntime"
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 4
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
